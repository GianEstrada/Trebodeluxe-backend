/**
 * Test espec√≠fico para CP 10000
 * Verificar si es M√©xico o internacional y c√≥mo lo maneja el sistema h√≠brido
 */

const ShippingQuoteService = require('./src/utils/shipping-quote.service');

async function testCP10000() {
  console.log('üîç ==========================================');
  console.log('üîç TEST ESPEC√çFICO PARA CP 10000');
  console.log('üîç ==========================================');
  
  const service = new ShippingQuoteService();
  
  try {
    // PASO 1: Verificar en base mexicana
    console.log('\nüá≤üáΩ PASO 1: Verificando en base mexicana...');
    const mexicanResult = await service.searchInMexicanDatabase('10000');
    console.log(`   Encontrado en M√©xico: ${mexicanResult.found ? '‚úÖ S√ç' : '‚ùå NO'}`);
    
    if (mexicanResult.found) {
      console.log(`   Estado: ${mexicanResult.address.area_level1}`);
      console.log(`   Municipio: ${mexicanResult.address.area_level2}`);
      console.log(`   Colonia: ${mexicanResult.address.area_level3}`);
    }
    
    // PASO 2: Detecci√≥n de pa√≠s
    console.log('\nüåç PASO 2: Detecci√≥n autom√°tica de pa√≠s...');
    const detectedCountry = service.detectCountryFromPostalCode('10000');
    console.log(`   Pa√≠s detectado: ${detectedCountry || 'N/A'}`);
    
    // PASO 3: Resoluci√≥n de direcci√≥n completa
    console.log('\nüìç PASO 3: Resoluci√≥n de direcci√≥n completa...');
    try {
      const addressResult = await service.getAddressFromPostalCodeInternational('10000');
      console.log('   ‚úÖ Direcci√≥n encontrada:');
      console.log(`   Pa√≠s: ${addressResult.country_name}`);
      console.log(`   Estado/Provincia: ${addressResult.area_level1}`);
      console.log(`   Ciudad: ${addressResult.area_level2}`);
      console.log(`   Coordenadas: ${addressResult.latitude}, ${addressResult.longitude}`);
    } catch (error) {
      console.log(`   ‚ùå Error en resoluci√≥n: ${error.message}`);
    }
    
    // PASO 4: Decisi√≥n h√≠brida
    console.log('\nüîÑ PASO 4: Decisi√≥n h√≠brida autom√°tica...');
    const wouldUseMexico = mexicanResult.found;
    const decision = wouldUseMexico ? 'nacional' : 'internacional';
    
    console.log(`   Decisi√≥n que tomar√≠a: ${decision}`);
    console.log(`   Funci√≥n que usar√≠a: ${decision === 'nacional' ? 'getShippingQuote()' : 'getShippingQuoteInternational()'}`);
    
    if (wouldUseMexico) {
      console.log(`   Raz√≥n: CP encontrado en base de datos mexicana`);
    } else {
      console.log(`   Raz√≥n: CP no encontrado en base mexicana ‚Üí usar internacional`);
    }
    
    // PASO 5: Comparar con funci√≥n h√≠brida real
    console.log('\nüß™ PASO 5: Probando funci√≥n h√≠brida real...');
    console.log('   Nota: Usar√° cartId ficticio para mostrar la l√≥gica');
    
    try {
      const hybridResult = await service.getShippingQuoteHybrid('test_cart_10000', '10000');
      console.log('   ‚úÖ Funci√≥n h√≠brida completada');
      console.log(`   Success: ${hybridResult.success}`);
      
      if (!hybridResult.success) {
        console.log(`   Error esperado: ${hybridResult.error}`);
        console.log('   (Error de carrito ficticio es normal en esta prueba)');
      }
    } catch (error) {
      console.log(`   Error esperado: ${error.message}`);
      console.log('   (Error de carrito ficticio es normal en esta prueba)');
    }
    
  } catch (error) {
    console.error('‚ùå ERROR EN EL TEST:', error.message);
    console.error('   Stack:', error.stack);
  }
  
  console.log('\nüèÅ ==========================================');
  console.log('üèÅ RESUMEN PARA CP 10000');
  console.log('üèÅ ==========================================');
  console.log('‚úÖ Test completado');
  console.log('üìã El CP 10000 fue analizado por el sistema h√≠brido');
  console.log('üéØ El sistema tomar√° la decisi√≥n correcta autom√°ticamente');
}

// Ejecutar el test
testCP10000().catch(console.error);
