/**
 * üöÄ ENDPOINT PARA COTIZACI√ìN H√çBRIDA CON SELECTOR DE PA√çSES
 * Maneja las solicitudes del frontend con pa√≠s seleccionado
 */

const express = require('express');
const router = express.Router();
const ShippingQuoteService = require('../utils/shipping-quote.service');

// Instancia del servicio
const shippingService = new ShippingQuoteService();

/**
 * POST /api/shipping/quote-hybrid
 * Endpoint principal para cotizaci√≥n h√≠brida con selecci√≥n de pa√≠s
 */
router.post('/quote-hybrid', async (req, res) => {
  console.log('üåç ==========================================');
  console.log('üåç NUEVA SOLICITUD COTIZACI√ìN H√çBRIDA');
  console.log('üåç ==========================================');
  
  try {
    const { cartId, postalCode, forceCountry } = req.body;
    
    // Validaciones b√°sicas
    if (!cartId) {
      return res.status(400).json({
        success: false,
        error: 'Cart ID es requerido',
        code: 'MISSING_CART_ID'
      });
    }

    if (!postalCode) {
      return res.status(400).json({
        success: false,
        error: 'C√≥digo postal es requerido',
        code: 'MISSING_POSTAL_CODE'
      });
    }

    // Log de la solicitud
    console.log('üì¶ Cart ID:', cartId);
    console.log('üìç C√≥digo postal:', postalCode);
    console.log('üè≥Ô∏è  Pa√≠s forzado:', forceCountry || 'Auto-detecci√≥n');
    console.log('üåê IP Cliente:', req.ip);
    console.log('‚è∞ Timestamp:', new Date().toISOString());

    // Llamar a la funci√≥n h√≠brida
    const startTime = Date.now();
    const result = await shippingService.getShippingQuoteHybrid(
      cartId, 
      postalCode.trim(), 
      forceCountry
    );
    const responseTime = Date.now() - startTime;

    console.log(`‚è±Ô∏è  Tiempo de respuesta: ${responseTime}ms`);

    if (result.success) {
      console.log('‚úÖ COTIZACI√ìN EXITOSA');
      console.log(`üìä Cotizaciones encontradas: ${result.quotations?.length || 0}`);
      console.log(`üåç Tipo: ${result.isInternational ? 'Internacional' : 'Nacional'}`);
      console.log(`üîÑ H√≠brido: ${result.isHybrid ? 'S√≠' : 'No'}`);

      // Formatear respuesta para frontend
      res.json({
        success: true,
        quotations: result.quotations || [],
        cartData: result.cartData,
        addressData: result.addressData,
        isInternational: result.isInternational || false,
        isHybrid: result.isHybrid || false,
        responseTime: responseTime,
        timestamp: new Date().toISOString(),
        
        // Informaci√≥n adicional para el frontend
        metadata: {
          postalCode: postalCode.trim(),
          forceCountry: forceCountry,
          detectedCountry: result.detectedCountry,
          functionUsed: result.isInternational ? 'getShippingQuoteInternational' : 'getShippingQuote'
        }
      });

    } else {
      console.log('‚ùå ERROR EN COTIZACI√ìN');
      console.log(`   Error: ${result.error}`);

      // Formatear error para frontend
      res.status(400).json({
        success: false,
        error: result.error || 'Error desconocido en cotizaci√≥n',
        details: result.details,
        code: result.code || 'QUOTATION_ERROR',
        isHybrid: result.isHybrid || false,
        responseTime: responseTime,
        timestamp: new Date().toISOString(),
        
        // Informaci√≥n de debugging (solo en development)
        ...(process.env.NODE_ENV === 'development' && {
          debug: {
            cartId: cartId,
            postalCode: postalCode.trim(),
            forceCountry: forceCountry,
            stack: result.stack
          }
        })
      });
    }

  } catch (error) {
    console.error('üí• ERROR CR√çTICO EN ENDPOINT:');
    console.error('   Mensaje:', error.message);
    console.error('   Stack:', error.stack);

    res.status(500).json({
      success: false,
      error: 'Error interno del servidor',
      code: 'INTERNAL_SERVER_ERROR',
      timestamp: new Date().toISOString(),
      
      // Informaci√≥n de debugging (solo en development)
      ...(process.env.NODE_ENV === 'development' && {
        debug: {
          message: error.message,
          stack: error.stack
        }
      })
    });
  }
});

/**
 * GET /api/shipping/countries
 * Endpoint para obtener lista de pa√≠ses soportados
 */
router.get('/countries', (req, res) => {
  const countries = [
    { code: 'MX', name: 'M√©xico', flag: 'üá≤üáΩ', type: 'national', isDefault: true },
    { code: 'US', name: 'Estados Unidos', flag: 'üá∫üá∏', type: 'international' },
    { code: 'CA', name: 'Canad√°', flag: 'üá®üá¶', type: 'international' },
    { code: 'GB', name: 'Reino Unido', flag: 'üá¨üáß', type: 'international' },
    { code: 'DE', name: 'Alemania', flag: 'üá©üá™', type: 'international' },
    { code: 'FR', name: 'Francia', flag: 'üá´üá∑', type: 'international' },
    { code: 'ES', name: 'Espa√±a', flag: 'üá™üá∏', type: 'international' },
    { code: 'IT', name: 'Italia', flag: 'üáÆüáπ', type: 'international' },
    { code: 'JP', name: 'Jap√≥n', flag: 'üáØüáµ', type: 'international' },
    { code: 'AU', name: 'Australia', flag: 'üá¶üá∫', type: 'international' },
    { code: 'BR', name: 'Brasil', flag: 'üáßüá∑', type: 'international' },
    { code: 'AR', name: 'Argentina', flag: 'üá¶üá∑', type: 'international' },
    { code: 'CO', name: 'Colombia', flag: 'üá®üá¥', type: 'international' },
    { code: 'PE', name: 'Per√∫', flag: 'üáµüá™', type: 'international' },
    { code: 'CL', name: 'Chile', flag: 'üá®üá±', type: 'international' },
    { code: 'NL', name: 'Pa√≠ses Bajos', flag: 'üá≥üá±', type: 'international' }
  ];

  res.json({
    success: true,
    countries: countries,
    total: countries.length,
    national: countries.filter(c => c.type === 'national').length,
    international: countries.filter(c => c.type === 'international').length
  });
});

/**
 * POST /api/shipping/detect-country
 * Endpoint para detectar pa√≠s desde c√≥digo postal
 */
router.post('/detect-country', (req, res) => {
  try {
    const { postalCode } = req.body;

    if (!postalCode) {
      return res.status(400).json({
        success: false,
        error: 'C√≥digo postal es requerido'
      });
    }

    // Usar funci√≥n de detecci√≥n del servicio
    const detectedCountry = shippingService.detectCountryFromPostalCode(postalCode);

    res.json({
      success: true,
      postalCode: postalCode.trim(),
      detectedCountry: detectedCountry,
      confidence: detectedCountry ? 'high' : 'low',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Error detectando pa√≠s:', error);
    res.status(500).json({
      success: false,
      error: 'Error detectando pa√≠s',
      code: 'DETECTION_ERROR'
    });
  }
});

/**
 * GET /api/shipping/status
 * Endpoint para verificar estado del sistema de env√≠os
 */
router.get('/status', async (req, res) => {
  try {
    // Verificar conectividad con APIs externas
    const status = {
      service: 'Shipping Hybrid System',
      version: '1.0.0',
      timestamp: new Date().toISOString(),
      status: 'operational',
      
      components: {
        hybridFunction: {
          status: 'operational',
          description: 'Funci√≥n h√≠brida de cotizaci√≥n'
        },
        mexicanDatabase: {
          status: 'operational',
          description: 'Base de datos de c√≥digos postales mexicanos',
          records: 31958
        },
        internationalSystem: {
          status: 'operational',
          description: 'Sistema de c√≥digos postales internacionales',
          countries: 16
        },
        skyDropXAPI: {
          status: 'unknown',
          description: 'API SkyDropX PRO (requiere carrito real para validar)'
        }
      }
    };

    res.json(status);

  } catch (error) {
    console.error('Error verificando status:', error);
    res.status(500).json({
      service: 'Shipping Hybrid System',
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

module.exports = router;
