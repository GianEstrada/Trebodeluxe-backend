const db = require('./src/config/db');

async function diagnosticarCategorias() {
  try {
    console.log('üîç Iniciando diagn√≥stico de categor√≠as...\n');

    // 1. Verificar conexi√≥n a la base de datos
    console.log('1Ô∏è‚É£ Verificando conexi√≥n a base de datos...');
    const connectionTest = await db.checkConnection();
    if (connectionTest.connected) {
      console.log('‚úÖ Conexi√≥n a base de datos: OK');
    } else {
      console.log('‚ùå Conexi√≥n a base de datos: FALLO');
      return;
    }

    // 2. Verificar si existe la tabla categorias
    console.log('\n2Ô∏è‚É£ Verificando existencia de tabla categorias...');
    const tableExists = await db.pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'categorias'
      );
    `);
    
    if (tableExists.rows[0].exists) {
      console.log('‚úÖ Tabla categorias: EXISTE');
    } else {
      console.log('‚ùå Tabla categorias: NO EXISTE');
      return;
    }

    // 3. Contar categor√≠as en la tabla
    console.log('\n3Ô∏è‚É£ Contando categor√≠as en la tabla...');
    const countResult = await db.pool.query('SELECT COUNT(*) as total FROM categorias;');
    const totalCategorias = countResult.rows[0].total;
    console.log(`üìä Total de categor√≠as: ${totalCategorias}`);

    // 4. Verificar estructura de la tabla
    console.log('\n4Ô∏è‚É£ Verificando estructura de tabla categorias...');
    const structure = await db.pool.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'categorias' 
      ORDER BY ordinal_position;
    `);
    
    console.log('üìã Columnas de la tabla categorias:');
    structure.rows.forEach(row => {
      console.log(`   - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
    });

    // 5. Verificar columnas SkyDropX espec√≠ficamente
    console.log('\n5Ô∏è‚É£ Verificando columnas SkyDropX...');
    const skyDropColumns = await db.pool.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'categorias' 
        AND column_name IN ('alto_cm', 'largo_cm', 'ancho_cm', 'peso_kg', 'nivel_compresion')
    `);
    
    const skydropExisting = skyDropColumns.rows.map(row => row.column_name);
    const skydropNeeded = ['alto_cm', 'largo_cm', 'ancho_cm', 'peso_kg', 'nivel_compresion'];
    const skydropMissing = skydropNeeded.filter(col => !skydropExisting.includes(col));
    
    console.log('‚úÖ Columnas SkyDropX presentes:', skydropExisting);
    if (skydropMissing.length > 0) {
      console.log('‚ùå Columnas SkyDropX faltantes:', skydropMissing);
    } else {
      console.log('‚úÖ Todas las columnas SkyDropX est√°n presentes');
    }

    // 6. Mostrar algunas categor√≠as de ejemplo
    if (totalCategorias > 0) {
      console.log('\n6Ô∏è‚É£ Mostrando categor√≠as existentes...');
      const sampleCategories = await db.pool.query(`
        SELECT id_categoria, nombre, activo 
        FROM categorias 
        ORDER BY id_categoria 
        LIMIT 5;
      `);
      
      console.log('üìã Categor√≠as de ejemplo:');
      sampleCategories.rows.forEach(cat => {
        console.log(`   - ID: ${cat.id_categoria}, Nombre: ${cat.nombre}, Activo: ${cat.activo}`);
      });
    }

    // 7. Probar la consulta que usa el endpoint
    console.log('\n7Ô∏è‚É£ Probando consulta del endpoint admin...');
    try {
      const testQuery = `
        SELECT 
          id_categoria,
          nombre,
          descripcion,
          activo,
          orden,
          fecha_creacion,
          fecha_actualizacion,
          ${skydropExisting.includes('alto_cm') ? 'alto_cm' : '0 as alto_cm'},
          ${skydropExisting.includes('largo_cm') ? 'largo_cm' : '0 as largo_cm'},
          ${skydropExisting.includes('ancho_cm') ? 'ancho_cm' : '0 as ancho_cm'},
          ${skydropExisting.includes('peso_kg') ? 'peso_kg' : '0 as peso_kg'},
          ${skydropExisting.includes('nivel_compresion') ? 'nivel_compresion' : "'baja' as nivel_compresion"},
          (SELECT COUNT(*) FROM productos WHERE id_categoria = categorias.id_categoria) as productos_count
        FROM categorias 
        ORDER BY orden ASC, nombre ASC
        LIMIT 3;
      `;

      const queryResult = await db.pool.query(testQuery);
      console.log('‚úÖ Consulta del endpoint: EXITOSA');
      console.log(`üìä Categor√≠as recuperadas: ${queryResult.rows.length}`);
      
      if (queryResult.rows.length > 0) {
        console.log('üìã Primera categor√≠a de prueba:');
        const firstCat = queryResult.rows[0];
        console.log(`   - ID: ${firstCat.id_categoria}`);
        console.log(`   - Nombre: ${firstCat.nombre}`);
        console.log(`   - Activo: ${firstCat.activo}`);
        console.log(`   - SkyDropX Data: alto=${firstCat.alto_cm}, largo=${firstCat.largo_cm}, ancho=${firstCat.ancho_cm}`);
      }

    } catch (queryError) {
      console.log('‚ùå Error en consulta del endpoint:', queryError.message);
    }

    console.log('\nüéØ RESUMEN DEL DIAGN√ìSTICO:');
    console.log('=====================================');
    console.log(`‚úÖ Base de datos: Conectada`);
    console.log(`‚úÖ Tabla categorias: Existe`);
    console.log(`üìä Total categor√≠as: ${totalCategorias}`);
    console.log(`üîß Columnas SkyDropX: ${skydropMissing.length > 0 ? `${skydropMissing.length} faltantes` : 'Completas'}`);
    
    if (skydropMissing.length > 0) {
      console.log('\n‚ö†Ô∏è ACCI√ìN REQUERIDA: Ejecutar migraci√≥n SkyDropX');
      console.log('   POST /api/categorias/admin/apply-skydropx-migration');
    } else {
      console.log('\n‚úÖ ESTRUCTURA COMPLETA: El problema puede ser de autenticaci√≥n o frontend');
    }

  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error.message);
  }
  
  process.exit(0);
}

diagnosticarCategorias();
