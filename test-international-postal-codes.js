/**
 * Prueba del sistema internacional de c√≥digos postales
 * Demuestra la capacidad de reconocer zonas aproximadas mediante CP de forma internacional
 */

const ShippingQuoteService = require('./src/utils/shipping-quote.service');

async function testInternationalPostalCodes() {
  console.log('üåç ========== PRUEBA SISTEMA INTERNACIONAL DE C√ìDIGOS POSTALES ==========');
  console.log('üìÖ Fecha:', new Date().toLocaleString());
  console.log('=======================================================================\n');

  const shippingService = new ShippingQuoteService();

  // Casos de prueba con c√≥digos postales de diferentes pa√≠ses
  const testCases = [
    // M√©xico (Base de datos local)
    { cp: '64000', country: null, description: 'M√©xico - Monterrey, NL (Base local)' },
    { cp: '66058', country: null, description: 'M√©xico - General Escobedo, NL (Base local)' },
    
    // M√©xico (Fallback Zippopotam)
    { cp: '45050', country: 'MX', description: 'M√©xico - Zapopan, Jalisco (Zippopotam)' },
    
    // Estados Unidos
    { cp: '10001', country: null, description: 'Estados Unidos - New York, NY (Auto-detecci√≥n)' },
    { cp: '90210', country: 'US', description: 'Estados Unidos - Beverly Hills, CA (Forzado)' },
    { cp: '33101', country: null, description: 'Estados Unidos - Miami, FL (Auto-detecci√≥n)' },
    
    // Canad√°
    { cp: 'M5V 3M6', country: null, description: 'Canad√° - Toronto, ON (Auto-detecci√≥n)' },
    { cp: 'H3A 0G4', country: 'CA', description: 'Canad√° - Montreal, QC (Forzado)' },
    
    // Espa√±a
    { cp: '28001', country: null, description: 'Espa√±a - Madrid (Auto-detecci√≥n)' },
    { cp: '08001', country: 'ES', description: 'Espa√±a - Barcelona (Forzado)' },
    
    // Francia
    { cp: '75001', country: null, description: 'Francia - Par√≠s (Auto-detecci√≥n)' },
    { cp: '13001', country: 'FR', description: 'Francia - Marsella (Forzado)' },
    
    // Brasil
    { cp: '01310-100', country: null, description: 'Brasil - S√£o Paulo, SP (Auto-detecci√≥n)' },
    { cp: '20040020', country: 'BR', description: 'Brasil - Rio de Janeiro, RJ (Forzado)' },
    
    // Reino Unido
    { cp: 'SW1A 1AA', country: null, description: 'Reino Unido - Londres (Auto-detecci√≥n)' },
    { cp: 'M1 1AA', country: 'GB', description: 'Reino Unido - Manchester (Forzado)' },
    
    // Alemania
    { cp: '10115', country: null, description: 'Alemania - Berl√≠n (Auto-detecci√≥n)' },
    { cp: '80331', country: 'DE', description: 'Alemania - M√∫nich (Forzado)' },
    
    // Argentina
    { cp: '1001', country: null, description: 'Argentina - Buenos Aires (Auto-detecci√≥n)' },
    { cp: '5000', country: 'AR', description: 'Argentina - C√≥rdoba (Forzado)' },
    
    // Colombia
    { cp: '110111', country: null, description: 'Colombia - Bogot√° (Auto-detecci√≥n)' },
    { cp: '050001', country: 'CO', description: 'Colombia - Medell√≠n (Forzado)' },
    
    // Australia
    { cp: '2000', country: null, description: 'Australia - Sydney, NSW (Auto-detecci√≥n)' },
    { cp: '3000', country: 'AU', description: 'Australia - Melbourne, VIC (Forzado)' },
    
    // Jap√≥n
    { cp: '100-0001', country: null, description: 'Jap√≥n - Tokio (Auto-detecci√≥n)' },
    { cp: '530-0001', country: 'JP', description: 'Jap√≥n - Osaka (Forzado)' },
    
    // India
    { cp: '110001', country: null, description: 'India - Nueva Delhi (Auto-detecci√≥n)' },
    { cp: '400001', country: 'IN', description: 'India - Mumbai (Forzado)' },
    
    // China
    { cp: '100000', country: null, description: 'China - Beijing (Auto-detecci√≥n)' },
    { cp: '200000', country: 'CN', description: 'China - Shanghai (Forzado)' },
    
    // C√≥digos no reconocidos (fallback gen√©rico)
    { cp: 'ABC123', country: null, description: 'C√≥digo no reconocido (Fallback gen√©rico)' },
    { cp: '999999', country: 'XX', description: 'Pa√≠s inexistente (Fallback gen√©rico)' }
  ];

  let successCount = 0;
  let errorCount = 0;

  for (const testCase of testCases) {
    try {
      console.log(`\nüß™ PRUEBA: ${testCase.description}`);
      console.log(`üìÆ C√≥digo postal: ${testCase.cp}`);
      console.log(`üè≥Ô∏è  Pa√≠s forzado: ${testCase.country || 'Auto-detecci√≥n'}`);
      console.log('---------------------------------------------------');

      const startTime = Date.now();
      const result = await shippingService.getAddressFromPostalCodeInternational(testCase.cp, testCase.country);
      const endTime = Date.now();

      console.log(`‚úÖ RESULTADO EXITOSO (${endTime - startTime}ms):`);
      console.log(`üìç Pa√≠s: ${result.country_name} (${result.country_code})`);
      console.log(`üìç Estado/Regi√≥n: ${result.area_level1}`);
      console.log(`üìç Ciudad/Municipio: ${result.area_level2}`);
      console.log(`üìç √Årea/Colonia: ${result.area_level3}`);
      
      if (result.latitude && result.longitude) {
        console.log(`üåê Coordenadas: ${result.latitude}, ${result.longitude}`);
      }
      
      if (result.isGeneric) {
        console.log(`‚ö†Ô∏è  NOTA: Datos gen√©ricos utilizados`);
      }
      
      if (result.isEmergency) {
        console.log(`üÜò NOTA: Fallback de emergencia utilizado`);
      }

      successCount++;

    } catch (error) {
      console.log(`‚ùå ERROR: ${error.message}`);
      errorCount++;
    }

    console.log('===================================================');
  }

  // Resumen final
  console.log(`\nüèÅ ========== RESUMEN DE PRUEBAS ==========`);
  console.log(`üìä Total de pruebas: ${testCases.length}`);
  console.log(`‚úÖ Exitosas: ${successCount}`);
  console.log(`‚ùå Errores: ${errorCount}`);
  console.log(`üìà Tasa de √©xito: ${((successCount / testCases.length) * 100).toFixed(1)}%`);
  
  console.log(`\nüéØ ========== CAPACIDADES DEMOSTRADAS ==========`);
  console.log(`üåç Detecci√≥n autom√°tica de pa√≠s por patr√≥n de c√≥digo postal`);
  console.log(`üá≤üáΩ Base de datos local mexicana (31,958+ c√≥digos)`);
  console.log(`üåê API Zippopotam para cobertura internacional`);
  console.log(`üîß APIs espec√≠ficas por pa√≠s (Brasil: ViaCEP)`);
  console.log(`üó∫Ô∏è  Fallback manual para c√≥digos conocidos`);
  console.log(`üåê Fallback gen√©rico para cualquier pa√≠s`);
  console.log(`üíæ Sistema de cache internacional`);
  console.log(`üìù Logging detallado para debugging`);
  
  console.log(`\nüìã ========== PA√çSES SOPORTADOS ==========`);
  const supportedCountries = [
    'üá≤üáΩ M√©xico (MX) - Base completa + APIs',
    'üá∫üá∏ Estados Unidos (US) - Zippopotam + Fallback',
    'üá®üá¶ Canad√° (CA) - Zippopotam + Fallback',
    'üá¨üáß Reino Unido (GB) - Zippopotam + Fallback',
    'üá´üá∑ Francia (FR) - Zippopotam + Fallback',
    'üá©üá™ Alemania (DE) - Zippopotam + Fallback',
    'üá™üá∏ Espa√±a (ES) - Zippopotam + Fallback',
    'üáÆüáπ Italia (IT) - Zippopotam + Fallback',
    'üáßüá∑ Brasil (BR) - ViaCEP + Zippopotam + Fallback',
    'üá¶üá∑ Argentina (AR) - Zippopotam + Fallback',
    'üá®üá¥ Colombia (CO) - Zippopotam + Fallback',
    'üá®üá± Chile (CL) - Zippopotam + Fallback',
    'üá¶üá∫ Australia (AU) - Zippopotam + Fallback',
    'üáÆüá≥ India (IN) - Zippopotam + Fallback',
    'üá®üá≥ China (CN) - Zippopotam + Fallback',
    'üáØüáµ Jap√≥n (JP) - Zippopotam + Fallback',
    'üåç Cualquier pa√≠s - Fallback gen√©rico'
  ];
  
  supportedCountries.forEach(country => console.log(country));
  
  console.log(`\nüöÄ Sistema internacional de c√≥digos postales listo para producci√≥n! üöÄ`);
  console.log('============================================================\n');
}

// Funci√≥n para probar detecci√≥n de pa√≠ses
async function testCountryDetection() {
  console.log('\nüîç ========== PRUEBA DE DETECCI√ìN DE PA√çSES ==========');
  
  const shippingService = new ShippingQuoteService();
  
  const detectTests = [
    '64000',     // M√©xico
    '10001',     // Estados Unidos
    'M5V 3M6',   // Canad√°
    'SW1A 1AA',  // Reino Unido
    '75001',     // Francia
    '10115',     // Alemania
    '28001',     // Espa√±a
    '00100',     // Italia
    '01310-100', // Brasil
    '1001',      // Argentina
    '110111',    // Colombia
    '8320001',   // Chile
    '2000',      // Australia
    '110001',    // India
    '100000',    // China
    '100-0001',  // Jap√≥n
    'ABC123'     // No reconocido
  ];
  
  for (const cp of detectTests) {
    const result = shippingService.detectCountryFromPostalCode(cp);
    console.log(`üìÆ ${cp.padEnd(10)} ‚Üí üè≥Ô∏è  ${result.countryName} (${result.countryCode})`);
  }
  
  console.log('======================================================\n');
}

// Ejecutar pruebas
async function runAllTests() {
  try {
    await testCountryDetection();
    await testInternationalPostalCodes();
  } catch (error) {
    console.error('‚ùå Error ejecutando pruebas:', error);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  runAllTests();
}

module.exports = { testInternationalPostalCodes, testCountryDetection };
