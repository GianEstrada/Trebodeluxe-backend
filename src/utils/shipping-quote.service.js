const { SkyDropXAuth } = require('./skydropx-auth');
const db = require('../config/db');
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

class ShippingQuoteService {
  constructor() {
    this.skyDropXAuth = new SkyDropXAuth();
    this.baseUrl = 'https://pro.skydropx.com/api/v1';
    
    // Cache para c√≥digos postales
    this.postalCodeCache = new Map();
    this.postalCodeDataLoaded = false;
    
    // Configuraci√≥n del origen (Monterrey, NL)
    this.addressFrom = {
      country_code: "MX",
      postal_code: "64000",
      area_level1: "Nuevo Le√≥n",
      area_level2: "Monterrey",
      area_level3: "Monterrey Centro"
    };
    
    // Paqueter√≠as disponibles - incluir m√°s opciones para mejor cobertura
    this.requestedCarriers = [
      "paquetexpress",
      "fedex",
      "dhl",
      "estafeta"
    ];
  }

  /**
   * Carga los c√≥digos postales desde archivo CPdescarga.txt
   * @returns {Promise<void>}
   */
  async loadPostalCodeData() {
    if (this.postalCodeDataLoaded) return;
    
    try {
      console.log('üìÇ Cargando base de datos de c√≥digos postales...');
      
      // Intentar m√∫ltiples rutas para mayor compatibilidad
      const possiblePaths = [
        path.join(__dirname, '..', 'Data', 'CPdescarga.txt'),   // Actual ubicaci√≥n
        path.join(__dirname, '..', 'data', 'CPdescarga.txt'),  // Min√∫sculas
        path.join(process.cwd(), 'src', 'Data', 'CPdescarga.txt'), // Desde root
        path.join(process.cwd(), 'src', 'data', 'CPdescarga.txt')  // Desde root min√∫sculas
      ];
      
      let filePath = null;
      for (const testPath of possiblePaths) {
        try {
          await fs.access(testPath);
          filePath = testPath;
          console.log(`‚úÖ Archivo encontrado en: ${filePath}`);
          break;
        } catch {
          // Continuar con la siguiente ruta
        }
      }
      
      if (!filePath) {
        throw new Error('Archivo CPdescarga.txt no encontrado en ninguna ubicaci√≥n esperada');
      }
      
      const fileContent = await fs.readFile(filePath, 'utf-8');
      
      const lines = fileContent.split('\n');
      let loadedCount = 0;
      let processedCPs = new Set();
      
      for (const line of lines) {
        if (line.trim() && line.includes('|')) {
          const parts = line.split('|');
          
          // Formato SEPOMEX: CP|Colonia|Tipo|Municipio|Estado|Ciudad|...
          if (parts.length >= 5) {
            const cp = parts[0].trim();
            const colonia = parts[1].trim();
            const municipio = parts[3].trim(); 
            const estado = parts[4].trim();
            
            // Validar que el CP sea num√©rico de 5 d√≠gitos
            if (/^\d{5}$/.test(cp) && estado && municipio && colonia) {
              // Si ya tenemos este CP, preferir la primera colonia encontrada
              if (!processedCPs.has(cp)) {
                this.postalCodeCache.set(cp, {
                  country_code: "MX",
                  postal_code: cp,
                  area_level1: estado,
                  area_level2: municipio,
                  area_level3: colonia
                });
                processedCPs.add(cp);
                loadedCount++;
              }
            }
          }
        }
      }
      
      console.log(`‚úÖ C√≥digos postales cargados: ${loadedCount}`);
      this.postalCodeDataLoaded = true;
      
    } catch (error) {
      console.error('‚ùå Error cargando c√≥digos postales:', error.message);
      console.log('üîÑ Continuando con APIs externas como fallback...');
    }
  }

  /**
   * Obtiene los datos completos del carrito con productos, variantes y categor√≠as
   * @param {string} cartId - ID del carrito
   * @returns {Promise<Object>} Datos del carrito con dimensiones calculadas
   */
  async getCartShippingData(cartId) {
    try {
      console.log('üõí Obteniendo datos del carrito para env√≠o:', cartId);

      // Primero verificar si el carrito existe
      const cartCheck = await db.query('SELECT id_carrito FROM carritos WHERE id_carrito = $1', [cartId]);
      if (cartCheck.rows.length === 0) {
        throw new Error(`Carrito con ID ${cartId} no encontrado`);
      }

      const query = `
        SELECT 
          cc.id_contenido,
          cc.cantidad,
          p.id_producto,
          CONCAT(p.nombre, ' - ', v.nombre) as producto_nombre,
          s.precio,
          p.id_categoria,
          c.nombre as categoria_nombre,
          c.hs_code as categoria_hs_code,
          c.alto_cm,
          c.largo_cm,
          c.ancho_cm,
          c.peso_kg,
          c.nivel_compresion,
          v.id_variante,
          v.nombre as variante_nombre,
          t.id_talla,
          t.nombre_talla as talla_nombre
        FROM contenido_carrito cc
        INNER JOIN productos p ON cc.id_producto = p.id_producto
        INNER JOIN categorias c ON p.id_categoria = c.id_categoria
        INNER JOIN variantes v ON cc.id_variante = v.id_variante
        INNER JOIN tallas t ON cc.id_talla = t.id_talla
        INNER JOIN stock s ON cc.id_producto = s.id_producto 
                           AND cc.id_variante = s.id_variante 
                           AND cc.id_talla = s.id_talla
        WHERE cc.id_carrito = $1
        ORDER BY cc.fecha_agregado
      `;

      const result = await db.query(query, [cartId]);
      
      console.log('üìã Resultado de consulta del carrito:', {
        rowCount: result.rows.length,
        cartId: cartId
      });
      
      // ==========================================
      // üîç LOG DETALLADO DE DATOS DEL CARRITO
      // ==========================================
      console.log('üîç ==========================================');
      console.log('üîç DATOS COMPLETOS DEL CARRITO:');
      console.log('üîç ==========================================');
      console.log('üõí Cart ID:', cartId);
      console.log('üìä Total de items encontrados:', result.rows.length);
      console.log('');
      console.log('üìã ITEMS DEL CARRITO (DETALLE COMPLETO):');
      console.log('-------------------------------------');
      result.rows.forEach((item, index) => {
        console.log(`üì¶ Item ${index + 1}:`);
        console.log(`   üÜî ID Contenido: ${item.id_contenido}`);
        console.log(`   üìù Producto: ${item.producto_nombre}`);
        console.log(`   üî¢ Cantidad: ${item.cantidad}`);
        console.log(`   üí∞ Precio: $${item.precio}`);
        console.log(`   üè∑Ô∏è  Categor√≠a: ${item.categoria_nombre} (ID: ${item.id_categoria})`);
        console.log(`   üèõÔ∏è  C√≥digo HS: ${item.categoria_hs_code || 'NO DEFINIDO'}`);
        console.log(`   üìè Dimensiones: ${item.largo_cm}x${item.ancho_cm}x${item.alto_cm} cm`);
        console.log(`   ‚öñÔ∏è  Peso: ${item.peso_kg} kg`);
        console.log(`   üóúÔ∏è  Compresi√≥n: ${item.nivel_compresion}`);
        console.log(`   üé® Variante: ${item.variante_nombre} (ID: ${item.id_variante})`);
        console.log(`   üìê Talla: ${item.talla_nombre} (ID: ${item.id_talla})`);
        console.log('   ---');
      });
      console.log('üîç ==========================================');
      
      if (result.rows.length === 0) {
        throw new Error('Carrito vac√≠o o no encontrado');
      }

      // Calcular dimensiones totales del env√≠o
      const shippingData = this.calculateShippingDimensions(result.rows);
      
      console.log('üì¶ Datos del carrito calculados:', {
        items: result.rows.length,
        totalWeight: shippingData.totalWeight,
        dimensions: shippingData.dimensions
      });

      return {
        cartItems: result.rows,
        ...shippingData
      };
      
    } catch (error) {
      console.error('‚ùå Error obteniendo datos del carrito:', error);
      throw error;
    }
  }

  /**
   * Calcula las dimensiones totales de env√≠o basado en los productos del carrito
   * @param {Array} cartItems - Items del carrito
   * @returns {Object} Dimensiones calculadas
   */
  calculateShippingDimensions(cartItems) {
    console.log('üîç ==========================================');
    console.log('üîç CALCULANDO DIMENSIONES DE ENV√çO:');
    console.log('üîç ==========================================');
    
    let totalWeight = 0;
    let totalVolume = 0;
    let maxLength = 0;
    let maxWidth = 0;
    let totalHeight = 0;
    let totalValue = 0; // Agregar c√°lculo del valor total

    console.log('üìä PROCESANDO ITEMS INDIVIDUALES:');
    console.log('-------------------------------------');

    cartItems.forEach((item, index) => {
      const quantity = item.cantidad;
      const itemWeight = parseFloat(item.peso_kg || 0) * quantity;
      const itemHeight = parseFloat(item.alto_cm || 0);
      const itemLength = parseFloat(item.largo_cm || 0);
      const itemWidth = parseFloat(item.ancho_cm || 0);
      const itemPrice = parseFloat(item.precio || 0);
      const itemValue = itemPrice * quantity;
      
      console.log(`üì¶ Item ${index + 1}: ${item.producto_nombre}`);
      console.log(`   üî¢ Cantidad: ${quantity}`);
      console.log(`   üìè Dimensiones: ${itemLength}x${itemWidth}x${itemHeight} cm`);
      console.log(`   ‚öñÔ∏è  Peso unitario: ${item.peso_kg} kg`);
      console.log(`   ‚öñÔ∏è  Peso total: ${itemWeight} kg`);
      console.log(`   üí∞ Precio unitario: $${itemPrice}`);
      console.log(`   üí∞ Valor total: $${itemValue}`);
      console.log('   ---');
      
      // Sumar peso total
      totalWeight += itemWeight;
      
      // Sumar valor total
      totalValue += itemValue;
      
      // Calcular volumen
      const itemVolume = itemHeight * itemLength * itemWidth * quantity;
      totalVolume += itemVolume;
      
      // Mantener las dimensiones m√°ximas
      maxLength = Math.max(maxLength, itemLength);
      maxWidth = Math.max(maxWidth, itemWidth);
      totalHeight += itemHeight * quantity; // Apilar en altura
    });

    // Aplicar factor de compresi√≥n si es necesario
    const compressionFactor = this.getCompressionFactor(cartItems);
    const compressedHeight = totalHeight * compressionFactor;

    const result = {
      totalWeight: Math.max(totalWeight, 0.5), // M√≠nimo 0.5kg (500g) - corregido para KG
      totalValue: totalValue, // Valor total calculado
      dimensions: {
        length: Math.max(maxLength, 20), // M√≠nimo 20cm (m√°s realista)
        width: Math.max(maxWidth, 15),   // M√≠nimo 15cm (m√°s realista)  
        height: Math.max(compressedHeight, 8) // M√≠nimo 8cm (m√°s realista)
      },
      compressionFactor: compressionFactor
    };

    console.log('');
    console.log('üìä C√ÅLCULOS FINALES:');
    console.log('-------------------------------------');
    console.log('‚öñÔ∏è  Peso total calculado:', totalWeight, 'kg');
    console.log('‚öñÔ∏è  Peso final (con m√≠nimo):', result.totalWeight, 'kg');
    console.log('üí∞ Valor total calculado: $', totalValue);
    console.log('üì¶ Volumen total:', totalVolume, 'cm¬≥');
    console.log('üìè Dimensi√≥n m√°xima largo:', maxLength, 'cm');
    console.log('üìè Dimensi√≥n m√°xima ancho:', maxWidth, 'cm');
    console.log('üìè Altura total sin comprimir:', totalHeight, 'cm');
    console.log('üóúÔ∏è  Factor de compresi√≥n:', compressionFactor);
    console.log('üìè Altura final comprimida:', compressedHeight, 'cm');
    console.log('üì¶ DIMENSIONES FINALES:', JSON.stringify(result.dimensions, null, 2));
    console.log('üîç ==========================================');

    return result;
  }

  /**
   * Obtiene el factor de compresi√≥n basado en las categor√≠as de productos
   * @param {Array} cartItems - Items del carrito
   * @returns {number} Factor de compresi√≥n (0.1 a 1.0)
   */
  getCompressionFactor(cartItems) {
    // Obtener el factor de compresi√≥n promedio de las categor√≠as
    let totalCompression = 0;
    let itemCount = 0;

    cartItems.forEach(item => {
      if (item.nivel_compresion) {
        let compression;
        
        // Manejar tanto n√∫meros como strings
        if (typeof item.nivel_compresion === 'number') {
          compression = item.nivel_compresion; // Usar directamente si es n√∫mero
        } else if (typeof item.nivel_compresion === 'string') {
          switch(item.nivel_compresion.toLowerCase()) {
            case 'bajo':
              compression = 0.9; // 90% del volumen original
              break;
            case 'medio':
              compression = 0.7; // 70% del volumen original
              break;
            case 'alto':
              compression = 0.5; // 50% del volumen original
              break;
            default:
              compression = 0.7; // Por defecto medio
          }
        } else {
          compression = 0.7; // Fallback por defecto
        }
        
        totalCompression += compression;
        itemCount++;
      }
    });

    // Si no hay datos de compresi√≥n, usar factor conservador
    if (itemCount === 0) {
      return 0.7; // 70% de compresi√≥n por defecto
    }

    return Math.max(0.1, Math.min(1.0, totalCompression / itemCount));
  }

  /**
   * Obtiene datos de direcci√≥n basado en c√≥digo postal
   * @param {string} postalCode - C√≥digo postal destino
   * @returns {Promise<Object>} Datos de la direcci√≥n
   */
  async getAddressFromPostalCode(postalCode) {
    try {
      console.log(`üîç B√öSQUEDA DE C√ìDIGO POSTAL: ${postalCode}`);
      console.log('=====================================');
      
      // Cargar datos locales si no est√°n cargados
      await this.loadPostalCodeData();
      
      // PASO 1: Verificar cache local primero (CPdescarga.txt)
      console.log('üìÅ Paso 1: Buscando en base de datos local (CPdescarga.txt)...');
      if (this.postalCodeCache.has(postalCode)) {
        const localData = this.postalCodeCache.get(postalCode);
        console.log(`‚úÖ CP ${postalCode} ENCONTRADO en base local`);
        console.log('üìç Datos locales:', JSON.stringify(localData, null, 2));
        return localData;
      }
      
      console.log(`‚ùå CP ${postalCode} NO encontrado en base local`);
      console.log(`üìä Total CPs en cache local: ${this.postalCodeCache.size}`);
      
      // PASO 2: Usar API Zippopotam como fallback
      console.log('üåê Paso 2: Consultando API Zippopotam.us como fallback...');
      
      try {
        const zippopotamUrl = `http://api.zippopotam.us/mx/${postalCode}`;
        console.log('üîó URL Zippopotam:', zippopotamUrl);
        
        const response = await fetch(zippopotamUrl);
        console.log(`üì° Response status: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
          const data = await response.json();
          console.log('ÔøΩ Respuesta completa de Zippopotam:', JSON.stringify(data, null, 2));
          
          if (data && data.places && data.places[0]) {
            const place = data.places[0];
            
            // Mapear datos de Zippopotam al formato de SkyDropX
            const addressData = {
              country_code: "MX",
              postal_code: postalCode,
              area_level1: place.state || place['state abbreviation'] || "",
              area_level2: place['place name'] || "", // Ciudad/Municipio
              area_level3: place['place name'] || ""  // Colonia (usar mismo valor como fallback)
            };
            
            console.log('‚úÖ CP encontrado en Zippopotam');
            console.log('üè∑Ô∏è  Estado:', addressData.area_level1);
            console.log('üè∑Ô∏è  Municipio:', addressData.area_level2);
            console.log('üè∑Ô∏è  Colonia:', addressData.area_level3);
            console.log('üìç Direcci√≥n final de Zippopotam:', JSON.stringify(addressData, null, 2));
            
            // Guardar en cache para futuras consultas
            this.postalCodeCache.set(postalCode, addressData);
            console.log('üíæ CP guardado en cache local para futuras consultas');
            
            return addressData;
          } else {
            console.log('‚ùå Zippopotam: Respuesta sin datos v√°lidos');
          }
        } else {
          console.log(`‚ùå Zippopotam: Error HTTP ${response.status}`);
        }
      } catch (zippopotamError) {
        console.log('‚ùå Error consultando Zippopotam:', zippopotamError.message);
      }
      
      // PASO 3: Fallback manual para CPs conocidos
      console.log('üîß Paso 3: Usando fallback manual para CPs conocidos...');
      
      
      // PASO 3: Fallback manual para CPs conocidos comunes
      console.log('üîß Paso 3: Usando fallback manual para CPs conocidos...');
      const knownPostalCodes = {
        // √Årea Metropolitana de Monterrey
        '64000': { area_level1: "Nuevo Le√≥n", area_level2: "Monterrey", area_level3: "Centro" },
        '64100': { area_level1: "Nuevo Le√≥n", area_level2: "Monterrey", area_level3: "Del Valle" },
        '64200': { area_level1: "Nuevo Le√≥n", area_level2: "Monterrey", area_level3: "Obrera" },
        '66000': { area_level1: "Nuevo Le√≥n", area_level2: "San Nicol√°s de los Garza", area_level3: "Centro" },
        '66050': { area_level1: "Nuevo Le√≥n", area_level2: "General Escobedo", area_level3: "Centro" },
        '66058': { area_level1: "Nuevo Le√≥n", area_level2: "General Escobedo", area_level3: "Praderas de San Jos√©" },
        '66450': { area_level1: "Nuevo Le√≥n", area_level2: "San Nicol√°s de los Garza", area_level3: "Centro" },
        
        // Ciudad de M√©xico
        '01000': { area_level1: "Ciudad de M√©xico", area_level2: "√Ålvaro Obreg√≥n", area_level3: "Colonia del Valle" },
        '06000': { area_level1: "Ciudad de M√©xico", area_level2: "Cuauht√©moc", area_level3: "Centro" },
        '11000': { area_level1: "Ciudad de M√©xico", area_level2: "Miguel Hidalgo", area_level3: "Lomas de Chapultepec" },
        
        // Guadalajara
        '44100': { area_level1: "Jalisco", area_level2: "Guadalajara", area_level3: "Centro" },
        '44200': { area_level1: "Jalisco", area_level2: "Guadalajara", area_level3: "Americana" },
        '44300': { area_level1: "Jalisco", area_level2: "Guadalajara", area_level3: "Lafayette" }
      };
      
      if (knownPostalCodes[postalCode]) {
        const fallbackData = {
          country_code: "MX",
          postal_code: postalCode,
          ...knownPostalCodes[postalCode]
        };
        
        console.log('‚úÖ CP encontrado en fallback manual');
        console.log('üìç Datos fallback:', JSON.stringify(fallbackData, null, 2));
        
        // Guardar en cache para futuras consultas
        this.postalCodeCache.set(postalCode, fallbackData);
        console.log('üíæ CP guardado en cache desde fallback manual');
        
        return fallbackData;
      }
      
      // PASO 4: Error - no se pudo encontrar informaci√≥n
      console.log('‚ùå Paso 4: CP no encontrado en ninguna fuente');
      console.log(`üîç Fuentes consultadas:
        ‚ùå Base local (CPdescarga.txt): ${this.postalCodeCache.size} CPs disponibles
        ‚ùå Zippopotam.us API
        ‚ùå Fallback manual: ${Object.keys(knownPostalCodes).length} CPs conocidos`);
      
      throw new Error(`No se pudo obtener informaci√≥n del c√≥digo postal ${postalCode} en ninguna fuente disponible`);
      
    } catch (error) {
      console.error('‚ùå ERROR GENERAL obteniendo datos de direcci√≥n:', error.message);
      console.error('üîç Stack trace:', error.stack);
      
      // PASO 5: Fallback gen√©rico como √∫ltimo recurso
      console.log('üÜò Paso 5: Usando fallback gen√©rico como √∫ltimo recurso...');
      console.log('‚ö†Ô∏è  ADVERTENCIA: Usando datos gen√©ricos - puede afectar precisi√≥n de cotizaciones');
      
      const genericFallback = {
        country_code: "MX",
        postal_code: postalCode,
        area_level1: "M√©xico", // Estado gen√©rico
        area_level2: "Ciudad", // Ciudad gen√©rica  
        area_level3: "Centro"  // Colonia gen√©rica
      };
      
      console.log('üìç Datos gen√©ricos aplicados:', JSON.stringify(genericFallback, null, 2));
      console.log('=====================================');
      
      return genericFallback;
    }
  }

  /**
   * Detecta el pa√≠s basado en el c√≥digo postal
   * @param {string} postalCode - C√≥digo postal a analizar
   * @returns {Object} Informaci√≥n del pa√≠s detectado
   */
  detectCountryFromPostalCode(postalCode) {
    // Patrones de c√≥digos postales por pa√≠s
    const countryPatterns = {
      // M√©xico: 5 d√≠gitos
      MX: { pattern: /^\d{5}$/, name: "M√©xico" },
      // Estados Unidos: 5 d√≠gitos o 5-4 d√≠gitos
      US: { pattern: /^\d{5}(-\d{4})?$/, name: "Estados Unidos" },
      // Canad√°: formato A1A 1A1
      CA: { pattern: /^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/i, name: "Canad√°" },
      // Reino Unido: varios formatos
      GB: { pattern: /^[A-Z]{1,2}\d[A-Z\d]?\s?\d[A-Z]{2}$/i, name: "Reino Unido" },
      // Francia: 5 d√≠gitos
      FR: { pattern: /^\d{5}$/, name: "Francia" },
      // Alemania: 5 d√≠gitos
      DE: { pattern: /^\d{5}$/, name: "Alemania" },
      // Espa√±a: 5 d√≠gitos
      ES: { pattern: /^\d{5}$/, name: "Espa√±a" },
      // Italia: 5 d√≠gitos
      IT: { pattern: /^\d{5}$/, name: "Italia" },
      // Brasil: 8 d√≠gitos (formato 00000-000)
      BR: { pattern: /^\d{5}-?\d{3}$/, name: "Brasil" },
      // Argentina: 4 d√≠gitos o formato A0000AAA
      AR: { pattern: /^(\d{4}|[A-Z]\d{4}[A-Z]{3})$/i, name: "Argentina" },
      // Colombia: 6 d√≠gitos
      CO: { pattern: /^\d{6}$/, name: "Colombia" },
      // Chile: 7 d√≠gitos
      CL: { pattern: /^\d{7}$/, name: "Chile" },
      // Australia: 4 d√≠gitos
      AU: { pattern: /^\d{4}$/, name: "Australia" },
      // India: 6 d√≠gitos
      IN: { pattern: /^\d{6}$/, name: "India" },
      // China: 6 d√≠gitos
      CN: { pattern: /^\d{6}$/, name: "China" },
      // Jap√≥n: 7 d√≠gitos (formato 000-0000)
      JP: { pattern: /^\d{3}-?\d{4}$/, name: "Jap√≥n" }
    };

    // Limpiar el c√≥digo postal
    const cleanPostalCode = postalCode.toString().trim().toUpperCase();
    
    // Primero verificar M√©xico como prioridad (nuestro mercado principal)
    if (countryPatterns.MX.pattern.test(cleanPostalCode)) {
      return { countryCode: 'MX', countryName: 'M√©xico', cleanPostalCode };
    }
    
    // Luego verificar otros pa√≠ses
    for (const [code, info] of Object.entries(countryPatterns)) {
      if (code !== 'MX' && info.pattern.test(cleanPostalCode)) {
        return { countryCode: code, countryName: info.name, cleanPostalCode };
      }
    }
    
    // Si no coincide con ning√∫n patr√≥n, asumir M√©xico como fallback
    console.log(`‚ö†Ô∏è  Patr√≥n de CP no reconocido: ${postalCode}, asumiendo M√©xico`);
    return { countryCode: 'MX', countryName: 'M√©xico', cleanPostalCode };
  }

  /**
   * Obtiene datos de API espec√≠fica por pa√≠s
   * @param {string} countryCode - C√≥digo del pa√≠s
   * @param {string} postalCode - C√≥digo postal
   * @returns {Promise<Object|null>} Datos de la direcci√≥n o null si no se encuentra
   */
  async getCountrySpecificPostalData(countryCode, postalCode) {
    try {
      console.log(`üîß Intentando API espec√≠fica para ${countryCode}: ${postalCode}`);
      
      switch (countryCode) {
        case 'US':
          // Para Estados Unidos podr√≠amos usar USPS API o otra
          console.log('üá∫üá∏ API espec√≠fica de Estados Unidos no implementada');
          return null;
          
        case 'CA':
          // Para Canad√° podr√≠amos usar Canada Post API
          console.log('üá®üá¶ API espec√≠fica de Canad√° no implementada');
          return null;
          
        case 'BR':
          // Para Brasil podr√≠amos usar ViaCEP
          try {
            const cleanCP = postalCode.replace(/\D/g, '');
            if (cleanCP.length === 8) {
              const url = `https://viacep.com.br/ws/${cleanCP}/json/`;
              console.log(`üáßüá∑ Consultando ViaCEP Brasil: ${url}`);
              
              const response = await fetch(url);
              if (response.ok) {
                const data = await response.json();
                if (data && !data.erro) {
                  return {
                    country_code: 'BR',
                    country_name: 'Brasil',
                    postal_code: postalCode,
                    area_level1: data.uf || '',
                    area_level2: data.localidade || '',
                    area_level3: data.bairro || '',
                    latitude: null,
                    longitude: null
                  };
                }
              }
            }
          } catch (error) {
            console.log('‚ùå Error consultando ViaCEP:', error.message);
          }
          return null;
          
        default:
          console.log(`‚ùå No hay API espec√≠fica implementada para ${countryCode}`);
          return null;
      }
    } catch (error) {
      console.log(`‚ùå Error en API espec√≠fica para ${countryCode}:`, error.message);
      return null;
    }
  }

  /**
   * Obtiene datos de fallback manual internacional
   * @param {string} countryCode - C√≥digo del pa√≠s
   * @param {string} postalCode - C√≥digo postal
   * @returns {Object|null} Datos de fallback o null si no se encuentra
   */
  getInternationalManualFallback(countryCode, postalCode) {
    console.log(`üó∫Ô∏è  Buscando fallback manual para ${countryCode}: ${postalCode}`);
    
    const internationalFallbacks = {
      // M√©xico - CPs conocidos importantes
      MX: {
        '64000': { area_level1: "Nuevo Le√≥n", area_level2: "Monterrey", area_level3: "Centro" },
        '64100': { area_level1: "Nuevo Le√≥n", area_level2: "Monterrey", area_level3: "Del Valle" },
        '64200': { area_level1: "Nuevo Le√≥n", area_level2: "Monterrey", area_level3: "Obrera" },
        '66000': { area_level1: "Nuevo Le√≥n", area_level2: "San Nicol√°s de los Garza", area_level3: "Centro" },
        '01000': { area_level1: "Ciudad de M√©xico", area_level2: "√Ålvaro Obreg√≥n", area_level3: "Colonia del Valle" },
        '06000': { area_level1: "Ciudad de M√©xico", area_level2: "Cuauht√©moc", area_level3: "Centro" },
        '44100': { area_level1: "Jalisco", area_level2: "Guadalajara", area_level3: "Centro" }
      },
      
      // Estados Unidos - ZIP codes importantes
      US: {
        '10001': { area_level1: "New York", area_level2: "New York", area_level3: "Manhattan" },
        '90210': { area_level1: "California", area_level2: "Beverly Hills", area_level3: "Beverly Hills" },
        '60601': { area_level1: "Illinois", area_level2: "Chicago", area_level3: "Downtown" },
        '33101': { area_level1: "Florida", area_level2: "Miami", area_level3: "Downtown" },
        '75201': { area_level1: "Texas", area_level2: "Dallas", area_level3: "Downtown" }
      },
      
      // Canad√° - C√≥digos postales importantes
      CA: {
        'M5V 3M6': { area_level1: "Ontario", area_level2: "Toronto", area_level3: "Downtown" },
        'H3A 0G4': { area_level1: "Quebec", area_level2: "Montreal", area_level3: "Downtown" },
        'V6B 2W9': { area_level1: "British Columbia", area_level2: "Vancouver", area_level3: "Downtown" }
      },
      
      // Espa√±a - C√≥digos importantes
      ES: {
        '28001': { area_level1: "Madrid", area_level2: "Madrid", area_level3: "Centro" },
        '08001': { area_level1: "Barcelona", area_level2: "Barcelona", area_level3: "Ciutat Vella" },
        '41001': { area_level1: "Sevilla", area_level2: "Sevilla", area_level3: "Centro" }
      },
      
      // Brasil - CEPs importantes
      BR: {
        '01310-100': { area_level1: "SP", area_level2: "S√£o Paulo", area_level3: "Bela Vista" },
        '20040-020': { area_level1: "RJ", area_level2: "Rio de Janeiro", area_level3: "Centro" },
        '70040-010': { area_level1: "DF", area_level2: "Bras√≠lia", area_level3: "Asa Norte" }
      }
    };
    
    const countryData = internationalFallbacks[countryCode];
    if (countryData && countryData[postalCode]) {
      const fallbackData = {
        country_code: countryCode,
        country_name: this.detectCountryFromPostalCode(postalCode).countryName,
        postal_code: postalCode,
        ...countryData[postalCode],
        latitude: null,
        longitude: null
      };
      
      console.log(`‚úÖ Fallback manual encontrado para ${countryCode}: ${postalCode}`);
      return fallbackData;
    }
    
    console.log(`‚ùå No hay fallback manual para ${countryCode}: ${postalCode}`);
    return null;
  }

  /**
   * Genera datos gen√©ricos por pa√≠s como √∫ltimo recurso
   * @param {string} countryCode - C√≥digo del pa√≠s
   * @param {string} postalCode - C√≥digo postal
   * @param {string} countryName - Nombre del pa√≠s
   * @returns {Object} Datos gen√©ricos del pa√≠s
   */
  getGenericCountryFallback(countryCode, postalCode, countryName) {
    console.log(`üåê Generando fallback gen√©rico para ${countryCode}: ${postalCode}`);
    
    // Datos gen√©ricos por pa√≠s basados en ciudades principales
    const genericCountryData = {
      MX: { area_level1: "M√©xico", area_level2: "Ciudad", area_level3: "Centro" },
      US: { area_level1: "State", area_level2: "City", area_level3: "Downtown" },
      CA: { area_level1: "Province", area_level2: "City", area_level3: "Downtown" },
      GB: { area_level1: "England", area_level2: "City", area_level3: "Centre" },
      FR: { area_level1: "R√©gion", area_level2: "Ville", area_level3: "Centre" },
      DE: { area_level1: "Land", area_level2: "Stadt", area_level3: "Zentrum" },
      ES: { area_level1: "Comunidad", area_level2: "Ciudad", area_level3: "Centro" },
      IT: { area_level1: "Regione", area_level2: "Citt√†", area_level3: "Centro" },
      BR: { area_level1: "Estado", area_level2: "Cidade", area_level3: "Centro" },
      AR: { area_level1: "Provincia", area_level2: "Ciudad", area_level3: "Centro" },
      CO: { area_level1: "Departamento", area_level2: "Ciudad", area_level3: "Centro" },
      CL: { area_level1: "Regi√≥n", area_level2: "Ciudad", area_level3: "Centro" },
      AU: { area_level1: "State", area_level2: "City", area_level3: "CBD" },
      IN: { area_level1: "State", area_level2: "City", area_level3: "Central" },
      CN: { area_level1: "Province", area_level2: "City", area_level3: "Central" },
      JP: { area_level1: "Prefecture", area_level2: "City", area_level3: "Central" }
    };
    
    const genericData = genericCountryData[countryCode] || {
      area_level1: "Region",
      area_level2: "City", 
      area_level3: "Central"
    };
    
    const fallbackData = {
      country_code: countryCode,
      country_name: countryName,
      postal_code: postalCode,
      ...genericData,
      latitude: null,
      longitude: null,
      isGeneric: true // Marcar como gen√©rico para logging
    };
    
    console.log(`‚ö†Ô∏è  Usando datos gen√©ricos para ${countryName} (${countryCode})`);
    return fallbackData;
  }

  /**
   * Obtiene informaci√≥n de direcci√≥n internacional desde c√≥digo postal
   * Sistema de m√∫ltiples niveles con soporte internacional:
   * 1. Detecci√≥n autom√°tica del pa√≠s
   * 2. Base de datos local (solo M√©xico)
   * 3. API Zippopotam internacional
   * 4. APIs espec√≠ficas por pa√≠s
   * 5. Fallback manual por pa√≠s
   * 6. Fallback gen√©rico
   * 
   * @param {string} postalCode - C√≥digo postal a buscar
   * @param {string} forceCountry - C√≥digo de pa√≠s opcional para forzar b√∫squeda
   * @returns {Promise<Object>} Informaci√≥n de la direcci√≥n
   */
  async getAddressFromPostalCodeInternational(postalCode, forceCountry = null) {
    try {
      console.log(`üåç ======== B√öSQUEDA INTERNACIONAL ========`);
      console.log(`üîç C√≥digo postal: ${postalCode}`);
      console.log(`üè≥Ô∏è  Pa√≠s forzado: ${forceCountry || 'Auto-detecci√≥n'}`);
      console.log('===============================================');
      
      // Detectar pa√≠s autom√°ticamente o usar el forzado
      const countryInfo = forceCountry 
        ? { countryCode: forceCountry.toUpperCase(), countryName: 'Forzado', cleanPostalCode: postalCode.toString().trim() }
        : this.detectCountryFromPostalCode(postalCode);
      
      console.log(`üè≥Ô∏è  Pa√≠s detectado: ${countryInfo.countryName} (${countryInfo.countryCode})`);
      console.log(`üìç CP limpio: ${countryInfo.cleanPostalCode}`);
      
      // Verificar cache primero
      const cacheKey = `${countryInfo.countryCode}-${countryInfo.cleanPostalCode}`;
      if (this.postalCodeCache.has(cacheKey)) {
        console.log('üíæ CP encontrado en cache internacional');
        const cachedData = this.postalCodeCache.get(cacheKey);
        console.log('üìç Datos desde cache:', JSON.stringify(cachedData, null, 2));
        console.log('===============================================');
        return cachedData;
      }
      
      // PASO 1: Base de datos local (solo para M√©xico)
      if (countryInfo.countryCode === 'MX') {
        console.log('üìÇ Paso 1: Buscando en base de datos local mexicana...');
        await this.loadPostalCodeData();
        
        if (this.postalCodeCache.has(countryInfo.cleanPostalCode)) {
          console.log('‚úÖ CP encontrado en base de datos local mexicana');
          const localData = this.postalCodeCache.get(countryInfo.cleanPostalCode);
          console.log('üìç Direcci√≥n desde base local:', JSON.stringify(localData, null, 2));
          
          // Guardar en cache internacional
          this.postalCodeCache.set(cacheKey, localData);
          console.log('===============================================');
          return localData;
        }
        console.log('‚ùå CP no encontrado en base de datos local mexicana');
      } else {
        console.log(`‚è≠Ô∏è  Paso 1: Saltando base local (pa√≠s: ${countryInfo.countryCode})`);
      }
      
      // PASO 2: API Zippopotam internacional
      console.log('üåê Paso 2: Consultando API Zippopotam internacional...');
      
      try {
        const zippopotamUrl = `http://api.zippopotam.us/${countryInfo.countryCode.toLowerCase()}/${countryInfo.cleanPostalCode}`;
        console.log('üîó URL Zippopotam internacional:', zippopotamUrl);
        
        const response = await fetch(zippopotamUrl);
        console.log(`üì° Response status: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
          const data = await response.json();
          console.log('üåç Respuesta de Zippopotam internacional:', JSON.stringify(data, null, 2));
          
          if (data && data.places && data.places[0]) {
            const place = data.places[0];
            
            // Mapear datos internacionales al formato est√°ndar
            const addressData = {
              country_code: countryInfo.countryCode,
              country_name: data.country || countryInfo.countryName,
              postal_code: countryInfo.cleanPostalCode,
              area_level1: place.state || place['state abbreviation'] || "",
              area_level2: place['place name'] || "",
              area_level3: place['place name'] || "",
              latitude: parseFloat(place.latitude) || null,
              longitude: parseFloat(place.longitude) || null
            };
            
            console.log('‚úÖ CP encontrado en Zippopotam internacional');
            console.log(`üìç Pa√≠s: ${addressData.country_name}`);
            console.log(`üìç Estado/Regi√≥n: ${addressData.area_level1}`);
            console.log(`üìç Ciudad: ${addressData.area_level2}`);
            
            // Guardar en cache internacional
            this.postalCodeCache.set(cacheKey, addressData);
            console.log('üíæ CP guardado en cache internacional');
            console.log('===============================================');
            
            return addressData;
          }
        }
        console.log(`‚ùå Zippopotam internacional: No se encontraron datos`);
      } catch (zippopotamError) {
        console.log('‚ùå Error consultando Zippopotam internacional:', zippopotamError.message);
      }
      
      // PASO 3: APIs espec√≠ficas por pa√≠s
      console.log('üîß Paso 3: Intentando APIs espec√≠ficas por pa√≠s...');
      
      const countrySpecificData = await this.getCountrySpecificPostalData(countryInfo.countryCode, countryInfo.cleanPostalCode);
      if (countrySpecificData) {
        console.log('‚úÖ CP encontrado en API espec√≠fica del pa√≠s');
        console.log('üìç Datos de API espec√≠fica:', JSON.stringify(countrySpecificData, null, 2));
        
        // Guardar en cache internacional
        this.postalCodeCache.set(cacheKey, countrySpecificData);
        console.log('üíæ CP guardado en cache desde API espec√≠fica');
        console.log('===============================================');
        
        return countrySpecificData;
      }
      
      // PASO 4: Fallback manual internacional
      console.log('üó∫Ô∏è  Paso 4: Usando fallback manual internacional...');
      
      const manualData = this.getInternationalManualFallback(countryInfo.countryCode, countryInfo.cleanPostalCode);
      if (manualData) {
        console.log('‚úÖ CP encontrado en fallback manual internacional');
        console.log('üìç Datos de fallback manual:', JSON.stringify(manualData, null, 2));
        
        // Guardar en cache internacional
        this.postalCodeCache.set(cacheKey, manualData);
        console.log('üíæ CP guardado en cache desde fallback manual');
        console.log('===============================================');
        
        return manualData;
      }
      
      // PASO 5: Fallback gen√©rico por pa√≠s
      console.log('üåê Paso 5: Usando fallback gen√©rico por pa√≠s...');
      
      const genericData = this.getGenericCountryFallback(countryInfo.countryCode, countryInfo.cleanPostalCode, countryInfo.countryName);
      console.log('üìç Usando datos gen√©ricos del pa√≠s:', JSON.stringify(genericData, null, 2));
      
      // Guardar en cache internacional
      this.postalCodeCache.set(cacheKey, genericData);
      console.log('üíæ CP guardado en cache desde fallback gen√©rico');
      console.log('‚ö†Ô∏è  ADVERTENCIA: Datos gen√©ricos - puede afectar precisi√≥n');
      console.log('===============================================');
      
      return genericData;
      
    } catch (error) {
      console.error('‚ùå ERROR CR√çTICO en b√∫squeda internacional:', error.message);
      console.error('üîç Stack trace:', error.stack);
      
      // Fallback de emergencia
      const emergencyData = {
        country_code: "MX", // Default a M√©xico
        country_name: "M√©xico",
        postal_code: postalCode,
        area_level1: "M√©xico",
        area_level2: "Ciudad",
        area_level3: "Centro",
        latitude: null,
        longitude: null,
        isEmergency: true
      };
      
      console.log('üÜò Usando fallback de emergencia:', JSON.stringify(emergencyData, null, 2));
      console.log('===============================================');
      
      return emergencyData;
    }
  }

  /**
   * Solicita cotizaci√≥n de env√≠o a SkyDropX con soporte internacional
   * @param {string} cartId - ID del carrito
   * @param {string} postalCodeTo - C√≥digo postal destino
   * @param {string} forceCountry - C√≥digo de pa√≠s opcional para forzar b√∫squeda
   * @returns {Promise<Object>} Cotizaciones de env√≠o
   */
  async getShippingQuoteInternational(cartId, postalCodeTo, forceCountry = null) {
    let quotationPayload = null; // Declarar variable al inicio para que est√© disponible en catch
    
    try {
      console.log('üåç =========================');
      console.log('üí∞ INICIANDO COTIZACI√ìN INTERNACIONAL');
      console.log('üöÄ =========================');
      console.log('üì¶ Cart ID:', cartId);
      console.log('üìç C√≥digo postal destino:', postalCodeTo);
      console.log('üè≥Ô∏è  Pa√≠s forzado:', forceCountry || 'Auto-detecci√≥n');
      console.log('‚è∞ Timestamp:', new Date().toISOString());

      // Detectar pa√≠s del c√≥digo postal
      const countryInfo = forceCountry 
        ? { countryCode: forceCountry.toUpperCase(), countryName: 'Forzado', cleanPostalCode: postalCodeTo.toString().trim() }
        : this.detectCountryFromPostalCode(postalCodeTo);
      
      console.log(`üåç Pa√≠s detectado: ${countryInfo.countryName} (${countryInfo.countryCode})`);

      // Obtener token de autenticaci√≥n
      console.log('üîë Paso 1: Obteniendo token de autenticaci√≥n...');
      const token = await this.skyDropXAuth.getBearerToken();
      console.log('‚úÖ Token obtenido exitosamente');
      
      // Obtener datos del carrito
      console.log('üõí Paso 2: Obteniendo datos del carrito...');
      const cartData = await this.getCartShippingData(cartId);
      console.log('üìä DATOS DEL CARRITO OBTENIDOS:');
      console.log('   Items:', cartData.cartItems.length);
      console.log('   Peso total:', cartData.totalWeight, 'kg');
      console.log('   Dimensiones:', JSON.stringify(cartData.dimensions));
      console.log('   Factor compresi√≥n:', cartData.compressionFactor);
      
      // Obtener datos de direcci√≥n destino usando sistema internacional
      console.log('üó∫Ô∏è  Paso 3: Obteniendo direcci√≥n destino internacional...');
      const addressTo = await this.getAddressFromPostalCodeInternational(postalCodeTo, forceCountry);
      console.log('üìç DIRECCI√ìN DESTINO INTERNACIONAL:');
      console.log('   Pa√≠s:', addressTo.country_name, `(${addressTo.country_code})`);
      console.log('   Estado/Regi√≥n:', addressTo.area_level1);
      console.log('   Ciudad/Municipio:', addressTo.area_level2);
      console.log('   √Årea/Colonia:', addressTo.area_level3);
      console.log('   CP:', addressTo.postal_code);
      
      if (addressTo.latitude && addressTo.longitude) {
        console.log('   Coordenadas:', `${addressTo.latitude}, ${addressTo.longitude}`);
      }
      
      if (addressTo.isGeneric) {
        console.log('‚ö†Ô∏è  ADVERTENCIA: Direcci√≥n gen√©rica - puede afectar precisi√≥n');
      }

      // Preparar productos para la API internacional con c√≥digos HS reales
      console.log('üì¶ Paso 3.5: Preparando productos con c√≥digos HS de categor√≠as...');
      const productsForParcel = cartData.cartItems.map((item, index) => {
        const unitPrice = parseFloat(item.precio) || 10.0;
        const hsCode = item.categoria_hs_code || '6109.90.00'; // Fallback gen√©rico
        
        // Generar descripci√≥n en ingl√©s basada en la categor√≠a
        let descriptionEn = `${item.categoria_nombre} - ${item.variante_nombre}`;
        
        // Traducir categor√≠as comunes al ingl√©s
        const categoryTranslations = {
          'playeras': 'T-shirt',
          'camisetas': 'T-shirt', 
          'sueteres': 'Sweater',
          'hoodies': 'Hoodie',
          'sudaderas': 'Sweatshirt',
          'pantalones': 'Pants',
          'jeans': 'Jeans',
          'shorts': 'Shorts',
          'faldas': 'Skirt',
          'vestidos': 'Dress',
          'gorras': 'Cap',
          'sombreros': 'Hat',
          'zapatos': 'Shoes',
          'tenis': 'Sneakers',
          'sandalias': 'Sandals',
          'bolsas': 'Bag',
          'mochilas': 'Backpack',
          'carteras': 'Purse'
        };
        
        const categoryKey = item.categoria_nombre.toLowerCase();
        const translatedCategory = categoryTranslations[categoryKey] || 'Cotton clothing';
        descriptionEn = `${translatedCategory} - ${item.variante_nombre}`;
        
        // Asegurar m√≠nimo 15 caracteres
        if (descriptionEn.length < 15) {
          descriptionEn = `Cotton ${translatedCategory} from Mexico`;
        }
        
        console.log(`   üì¶ Producto ${index + 1}: ${item.producto_nombre}`);
        console.log(`     üèõÔ∏è  HS Code: ${hsCode} (Categor√≠a: ${item.categoria_nombre})`);
        console.log(`     üåç Descripci√≥n EN: ${descriptionEn}`);
        console.log(`     üí∞ Precio: $${unitPrice} x ${item.cantidad}`);
        
        return {
          hs_code: hsCode,
          description_en: descriptionEn.substring(0, 100), // M√°ximo 100 caracteres
          country_code: "MX", // Pa√≠s de origen (M√©xico)
          quantity: parseInt(item.cantidad) || 1,
          price: parseFloat(unitPrice.toFixed(2))
        };
      });

      console.log(`üìã ${productsForParcel.length} productos preparados con c√≥digos HS reales`);

      // Preparar payload para SkyDropX
      quotationPayload = {
        quotation: {
          order_id: `cart_${cartId}_${Date.now()}`,
          address_from: this.addressFrom,
          address_to: addressTo,
          parcels: [
            {
              length: Math.ceil(cartData.dimensions.length),
              width: Math.ceil(cartData.dimensions.width),
              height: Math.ceil(cartData.dimensions.height),
              weight: Math.ceil(cartData.totalWeight),
              products: productsForParcel // Productos con c√≥digos HS reales
            }
          ],
          shipment_type: "package",
          quote_type: "carrier"
        }
      };

      console.log('üì§ Paso 4: Preparando solicitud internacional a SkyDropX...');
      console.log('üîó URL:', `${this.baseUrl}/quotations`);
      console.log('üìã Direcci√≥n destino procesada:', JSON.stringify(addressTo, null, 2));
      
      // ==========================================
      // üîç LOG DETALLADO DE LA ESTRUCTURA JSON
      // ==========================================
      console.log('üîç ==========================================');
      console.log('üîç ESTRUCTURA COMPLETA DEL JSON A ENVIAR:');
      console.log('üîç ==========================================');
      console.log('üì¶ PAYLOAD COMPLETO:', JSON.stringify(quotationPayload, null, 2));
      console.log('');
      console.log('üîß AN√ÅLISIS DETALLADO DE COMPONENTES:');
      console.log('-------------------------------------');
      console.log('üìã ORDER ID:', quotationPayload.quotation.order_id);
      console.log('üìç ADDRESS FROM:', JSON.stringify(quotationPayload.quotation.address_from, null, 2));
      console.log('üìç ADDRESS TO:', JSON.stringify(quotationPayload.quotation.address_to, null, 2));
      console.log('üì¶ PARCELS:', JSON.stringify(quotationPayload.quotation.parcels, null, 2));
      console.log('üöö SHIPMENT TYPE:', quotationPayload.quotation.shipment_type);
      console.log('üí∞ QUOTE TYPE:', quotationPayload.quotation.quote_type);
      console.log('');
      console.log('üìä DATOS DEL CARRITO USADOS:');
      console.log('-------------------------------------');
      console.log('   Items en carrito:', cartData.cartItems.length);
      console.log('   Peso total calculado:', cartData.totalWeight, 'kg');
      console.log('   Valor total del carrito:', cartData.totalValue || 'NO DISPONIBLE');
      console.log('   Dimensiones calculadas:', JSON.stringify(cartData.dimensions, null, 2));
      console.log('   Factor de compresi√≥n:', cartData.compressionFactor);
      console.log('');
      console.log('üîç HEADERS DE LA PETICI√ìN:');
      console.log('-------------------------------------');
      console.log('   Content-Type: application/json');
      console.log('   Authorization: Bearer [TOKEN_PRESENTE]');
      console.log('üîç ==========================================');
      console.log('üì§ Enviando solicitud...');

      // Hacer petici√≥n a SkyDropX
      const response = await axios.post(
        `${this.baseUrl}/quotations`,
        quotationPayload,
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );

      console.log('üì• Respuesta de SkyDropX recibida');
      console.log('üîç STATUS RESPONSE:', response.status);
      
      // ==========================================
      // üîç LOG DETALLADO DE LA RESPUESTA JSON (INTERNACIONAL)
      // ==========================================
      console.log('üîç ==========================================');
      console.log('üîç RESPUESTA COMPLETA DE SKYDROPX (INTERNACIONAL):');
      console.log('üîç ==========================================');
      console.log('üì• RESPONSE DATA COMPLETA:', JSON.stringify(response.data, null, 2));
      console.log('');
      console.log('üîß AN√ÅLISIS DE LA RESPUESTA:');
      console.log('-------------------------------------');
      console.log('üìä Status HTTP:', response.status);
      console.log('üìã Response Headers:', JSON.stringify(response.headers, null, 2));
      console.log('üì¶ Response Size:', JSON.stringify(response.data).length, 'caracteres');
      console.log('üåç Pa√≠s destino:', addressTo.country_name, '(' + addressTo.country_code + ')');
      console.log('üîç ==========================================');
      
      // Log espec√≠fico de cotizaciones exitosas
      if (response.data && response.data.rates) {
        const successfulRates = response.data.rates.filter(rate => rate.success === true);
        const failedRates = response.data.rates.filter(rate => rate.success === false);
        
        console.log(`üìä RESUMEN DE COTIZACIONES INTERNACIONAL:`);
        console.log(`   Pa√≠s destino: ${addressTo.country_name} (${addressTo.country_code})`);
        console.log(`   Total de rates: ${response.data.rates.length}`);
        console.log(`   Exitosas: ${successfulRates.length}`);
        console.log(`   Fallidas: ${failedRates.length}`);
        
        if (successfulRates.length > 0) {
          console.log('‚úÖ COTIZACIONES EXITOSAS:');
          successfulRates.forEach((rate, index) => {
            console.log(`   ${index + 1}. ${rate.provider_display_name} - ${rate.provider_service_name}: $${rate.total} ${rate.currency_code} (${rate.days} d√≠as)`);
          });
        }
        
        if (failedRates.length > 0) {
          console.log('‚ùå COTIZACIONES FALLIDAS (primeras 3):');
          failedRates.slice(0, 3).forEach((rate, index) => {
            const errorMsg = rate.error_messages && rate.error_messages.length > 0 
              ? rate.error_messages[0].error_message 
              : 'Sin mensaje de error';
            console.log(`   ${index + 1}. ${rate.provider_display_name} - ${rate.provider_service_name}: ${errorMsg}`);
          });
        }
      }

      console.log('üéâ COTIZACI√ìN INTERNACIONAL COMPLETADA EXITOSAMENTE');
      
      return {
        success: true,
        isInternational: true,
        countryInfo: countryInfo,
        addressInfo: {
          detected: addressTo,
          isGeneric: addressTo.isGeneric || false,
          hasCoordinates: !!(addressTo.latitude && addressTo.longitude)
        },
        cartData: {
          items: cartData.cartItems.length,
          totalWeight: cartData.totalWeight,
          dimensions: cartData.dimensions,
          compressionFactor: cartData.compressionFactor
        },
        quotations: response.data,
        requestPayload: quotationPayload
      };

    } catch (error) {
      console.error('‚ùå Error obteniendo cotizaci√≥n internacional:', error.message);
      
      // Log detallado del error
      if (error.response) {
        console.error('üìã DETALLES DEL ERROR INTERNACIONAL:');
        console.error('üîç STATUS ERROR:', error.response.status);
        console.error('üîç STATUS TEXT:', error.response.statusText);
        console.error('üîç DATA ERROR:', JSON.stringify(error.response.data, null, 2));
      }
      
      return {
        success: false,
        isInternational: true,
        error: error.message,
        details: error.response?.data || 'No additional details available',
        requestPayload: quotationPayload || null
      };
    }
  }

  async getShippingQuote(cartId, postalCodeTo) {
    let quotationPayload = null; // Declarar variable al inicio para que est√© disponible en catch
    
    try {
      console.log('ÔøΩ =========================');
      console.log('üí∞ INICIANDO COTIZACI√ìN DE ENV√çO');
      console.log('üöÄ =========================');
      console.log('üì¶ Cart ID:', cartId);
      console.log('üìç C√≥digo postal destino:', postalCodeTo);
      console.log('‚è∞ Timestamp:', new Date().toISOString());

      // Obtener token de autenticaci√≥n
      console.log('üîë Paso 1: Obteniendo token de autenticaci√≥n...');
      const token = await this.skyDropXAuth.getBearerToken();
      console.log('‚úÖ Token obtenido exitosamente');
      
      // Obtener datos del carrito
      console.log('üõí Paso 2: Obteniendo datos del carrito...');
      const cartData = await this.getCartShippingData(cartId);
      console.log('üìä DATOS DEL CARRITO OBTENIDOS:');
      console.log('   Items:', cartData.cartItems.length);
      console.log('   Peso total:', cartData.totalWeight, 'kg');
      console.log('   Dimensiones:', JSON.stringify(cartData.dimensions));
      console.log('   Factor compresi√≥n:', cartData.compressionFactor);
      
      // Obtener datos de direcci√≥n destino
      console.log('üó∫Ô∏è  Paso 3: Obteniendo direcci√≥n destino...');
      const addressTo = await this.getAddressFromPostalCode(postalCodeTo);
      console.log('üìç DIRECCI√ìN DESTINO:');
      console.log('   Estado:', addressTo.area_level1);
      console.log('   Municipio:', addressTo.area_level2);
      console.log('   Colonia:', addressTo.area_level3);
      console.log('   CP:', addressTo.postal_code);

      // Preparar payload para SkyDropX
      quotationPayload = {
        quotation: {
          order_id: `cart_${cartId}_${Date.now()}`,
          address_from: this.addressFrom,
          address_to: addressTo,
          parcels: [
            {
              length: Math.ceil(cartData.dimensions.length),
              width: Math.ceil(cartData.dimensions.width),
              height: Math.ceil(cartData.dimensions.height),
              weight: Math.ceil(cartData.totalWeight),
              declared_value: Math.ceil(cartData.totalValue), // Usar valor real del carrito
              description: "Cotton clothing items" // Descripci√≥n gen√©rica para clasificaci√≥n
            }
          ],
          // No especificar requested_carriers inicialmente para obtener todas las opciones
          shipment_type: "package", // Tipo de env√≠o
          quote_type: "carrier" // Tipo de cotizaci√≥n
        }
      };

      console.log('üì§ Paso 4: Preparando solicitud a SkyDropX...');
      console.log('üîó URL:', `${this.baseUrl}/quotations`);
      
      // ==========================================
      // üîç LOG DETALLADO DE LA ESTRUCTURA JSON (NACIONAL)
      // ==========================================
      console.log('ÔøΩ ==========================================');
      console.log('üîç ESTRUCTURA COMPLETA DEL JSON A ENVIAR (NACIONAL):');
      console.log('üîç ==========================================');
      console.log('üì¶ PAYLOAD COMPLETO:', JSON.stringify(quotationPayload, null, 2));
      console.log('');
      console.log('üîß AN√ÅLISIS DETALLADO DE COMPONENTES:');
      console.log('-------------------------------------');
      console.log('üìã ORDER ID:', quotationPayload.quotation.order_id);
      console.log('üìç ADDRESS FROM:', JSON.stringify(quotationPayload.quotation.address_from, null, 2));
      console.log('üìç ADDRESS TO:', JSON.stringify(quotationPayload.quotation.address_to, null, 2));
      console.log('ÔøΩ PARCELS:', JSON.stringify(quotationPayload.quotation.parcels, null, 2));
      console.log('üöö SHIPMENT TYPE:', quotationPayload.quotation.shipment_type);
      console.log('üí∞ QUOTE TYPE:', quotationPayload.quotation.quote_type);
      console.log('');
      console.log('üìä DATOS DEL CARRITO USADOS:');
      console.log('-------------------------------------');
      console.log('   Items en carrito:', cartData.cartItems.length);
      console.log('   Peso total calculado:', cartData.totalWeight, 'kg');
      console.log('   Valor total del carrito:', cartData.totalValue || 'NO DISPONIBLE');
      console.log('   Dimensiones calculadas:', JSON.stringify(cartData.dimensions, null, 2));
      console.log('   Factor de compresi√≥n:', cartData.compressionFactor);
      console.log('');
      console.log('üîç HEADERS DE LA PETICI√ìN:');
      console.log('-------------------------------------');
      console.log('   Content-Type: application/json');
      console.log('   Authorization: Bearer [TOKEN_PRESENTE]');
      console.log('üîç ==========================================');
      console.log('üì§ Enviando solicitud...');

      // Hacer petici√≥n a SkyDropX
      const response = await axios.post(
        `${this.baseUrl}/quotations`,
        quotationPayload,
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );

      console.log('üì• Respuesta de SkyDropX recibida');
      console.log('üîç STATUS RESPONSE:', response.status);
      console.log('üîç HEADERS RESPONSE:', JSON.stringify(response.headers, null, 2));
      
      // ==========================================
      // üîç LOG DETALLADO DE LA RESPUESTA JSON
      // ==========================================
      console.log('üîç ==========================================');
      console.log('üîç RESPUESTA COMPLETA DE SKYDROPX (NACIONAL):');
      console.log('üîç ==========================================');
      console.log('üì• RESPONSE DATA COMPLETA:', JSON.stringify(response.data, null, 2));
      console.log('');
      console.log('üîß AN√ÅLISIS DE LA RESPUESTA:');
      console.log('-------------------------------------');
      console.log('üìä Status HTTP:', response.status);
      console.log('üìã Response Headers:', JSON.stringify(response.headers, null, 2));
      console.log('üì¶ Response Size:', JSON.stringify(response.data).length, 'caracteres');
      console.log('üîç ==========================================');
      
      // Log espec√≠fico de cotizaciones exitosas
      if (response.data && response.data.rates) {
        const successfulRates = response.data.rates.filter(rate => rate.success === true);
        const failedRates = response.data.rates.filter(rate => rate.success === false);
        
        console.log(`üìä RESUMEN DE COTIZACIONES:`);
        console.log(`   Total de rates: ${response.data.rates.length}`);
        console.log(`   Exitosas: ${successfulRates.length}`);
        console.log(`   Fallidas: ${failedRates.length}`);
        
        if (successfulRates.length > 0) {
          console.log('‚úÖ COTIZACIONES EXITOSAS:');
          successfulRates.forEach((rate, index) => {
            console.log(`   ${index + 1}. ${rate.provider_display_name} - ${rate.provider_service_name}: $${rate.total} ${rate.currency_code} (${rate.days} d√≠as)`);
          });
        }
        
        if (failedRates.length > 0) {
          console.log('‚ùå COTIZACIONES FALLIDAS (primeras 3):');
          failedRates.slice(0, 3).forEach((rate, index) => {
            const errorMsg = rate.error_messages && rate.error_messages.length > 0 
              ? rate.error_messages[0].error_message 
              : 'Sin mensaje de error';
            console.log(`   ${index + 1}. ${rate.provider_display_name} - ${rate.provider_service_name}: ${errorMsg}`);
          });
        }
      }

      return {
        success: true,
        cartData: {
          items: cartData.cartItems.length,
          totalWeight: cartData.totalWeight,
          dimensions: cartData.dimensions,
          compressionFactor: cartData.compressionFactor
        },
        quotations: response.data,
        requestPayload: quotationPayload // Para debugging
      };
      
      console.log('üéâ COTIZACI√ìN COMPLETADA EXITOSAMENTE');
      console.log('üìä Datos retornados al cliente:', JSON.stringify({
        success: true,
        totalQuotations: response.data.rates ? response.data.rates.length : 0,
        successfulQuotations: response.data.rates ? response.data.rates.filter(r => r.success).length : 0,
        cartItems: cartData.cartItems.length,
        totalWeight: cartData.totalWeight + ' kg'
      }, null, 2));
      console.log('üöÄ =========================');
      
      return {
        success: true,
        cartData: {
          items: cartData.cartItems.length,
          totalWeight: cartData.totalWeight,
          dimensions: cartData.dimensions,
          compressionFactor: cartData.compressionFactor
        },
        quotations: response.data,
        requestPayload: quotationPayload // Para debugging
      };

    } catch (error) {
      console.error('‚ùå Error obteniendo cotizaci√≥n de env√≠o:', error.message);
      
      // Log detallado del error con m√°s informaci√≥n
      if (error.response) {
        console.error('üìã DETALLES DEL ERROR DE SKYDROPX:');
        console.error('üîç STATUS ERROR:', error.response.status);
        console.error('üîç STATUS TEXT:', error.response.statusText);
        console.error('üîç HEADERS ERROR:', JSON.stringify(error.response.headers, null, 2));
        console.error('üîç DATA ERROR COMPLETA:', JSON.stringify(error.response.data, null, 2));
        
        // Log espec√≠fico para errores comunes
        if (error.response.status === 401) {
          console.error('üö® ERROR DE AUTENTICACI√ìN: Token inv√°lido o expirado');
        } else if (error.response.status === 422) {
          console.error('üö® ERROR DE VALIDACI√ìN: Datos de la solicitud incorrectos');
        } else if (error.response.status === 429) {
          console.error('üö® ERROR DE RATE LIMIT: Demasiadas solicitudes');
        } else if (error.response.status >= 500) {
          console.error('üö® ERROR DEL SERVIDOR: Problema en SkyDropX');
        }
      } else if (error.request) {
        console.error('üìã ERROR DE RED/CONEXI√ìN:');
        console.error('üîç REQUEST CONFIG:', JSON.stringify(error.config, null, 2));
        console.error('üö® No se recibi√≥ respuesta del servidor');
      } else {
        console.error('üìã ERROR DESCONOCIDO:');
        console.error('üîç ERROR STACK:', error.stack);
      }
      
      return {
        success: false,
        error: error.message,
        details: error.response?.data || 'No additional details available',
        requestPayload: quotationPayload || null // Para debugging
      };
    }
  }

  /**
   * Busca un CP solo en la base de datos mexicana (sin fallbacks)
   * @param {string} postalCode - C√≥digo postal a buscar
   * @returns {Object} Resultado de la b√∫squeda
   */
  async searchInMexicanDatabase(postalCode) {
    console.log('üîç B√öSQUEDA DIRECTA EN BASE MEXICANA:', postalCode);
    
    try {
      // Cargar base de datos si no est√° cargada
      if (!this.postalCodeDataLoaded || this.postalCodeCache.size === 0) {
        await this.loadPostalCodeData();
      }

      const cleanPostalCode = postalCode.trim();
      
      // Buscar en cache local
      if (this.postalCodeCache.has(cleanPostalCode)) {
        const cachedData = this.postalCodeCache.get(cleanPostalCode);
        console.log('‚úÖ CP encontrado en cache mexicano');
        return {
          found: true,
          address: {
            country_code: 'MX',
            postal_code: cleanPostalCode,
            area_level1: cachedData.area_level1,
            area_level2: cachedData.area_level2,
            area_level3: cachedData.area_level3
          }
        };
      }

      console.log('‚ùå CP no encontrado en base mexicana');
      return { found: false, address: null };
      
    } catch (error) {
      console.error('‚ùå Error en b√∫squeda directa mexicana:', error.message);
      return { found: false, address: null };
    }
  }

  /**
   * Funci√≥n h√≠brida que primero verifica CP en M√©xico, luego aplica internacional
   * @param {string} cartId - ID del carrito
   * @param {string} postalCodeTo - C√≥digo postal destino
   * @param {string} forceCountry - Pa√≠s forzado (opcional)
   * @returns {Object} Resultado de cotizaci√≥n
   */
  async getShippingQuoteHybrid(cartId, postalCodeTo, forceCountry = null) {
    console.log('üîÑ =======================================');
    console.log('üåé COTIZACI√ìN H√çBRIDA (M√âXICO + INTERNACIONAL)');
    console.log('üîÑ =======================================');
    console.log('üì¶ Cart ID:', cartId);
    console.log('üìç C√≥digo postal destino:', postalCodeTo);
    console.log('üè≥Ô∏è  Pa√≠s forzado:', forceCountry || 'Auto-detecci√≥n');
    console.log('‚è∞ Timestamp:', new Date().toISOString());

    try {
      // PASO 1: Verificar si el CP existe en la base de datos mexicana
      console.log('\nüá≤üáΩ PASO 1: Verificando si CP existe en base mexicana...');
      
      let isMexicanCP = false;
      let mexicanAddress = null;
      
      try {
        // Intentar b√∫squeda directa en base mexicana (sin fallback gen√©rico)
        const result = await this.searchInMexicanDatabase(postalCodeTo);
        if (result && result.found) {
          mexicanAddress = result.address;
          console.log('‚úÖ CP encontrado en base mexicana:');
          console.log('   Estado:', mexicanAddress.area_level1);
          console.log('   Municipio:', mexicanAddress.area_level2);
          console.log('   Colonia:', mexicanAddress.area_level3);
          isMexicanCP = true;
        } else {
          console.log('‚ùå CP no encontrado en base mexicana');
          isMexicanCP = false;
        }
      } catch (error) {
        console.log('‚ùå Error verificando base mexicana:', error.message);
        isMexicanCP = false;
      }

      // PASO 2: Decidir qu√© funci√≥n usar
      if (isMexicanCP && !forceCountry) {
        console.log('\nüá≤üáΩ DECISI√ìN: Usar cotizaci√≥n nacional (M√©xico)');
        console.log('üìû Llamando a getShippingQuote()...');
        return await this.getShippingQuote(cartId, postalCodeTo);
      } else {
        console.log('\nüåç DECISI√ìN: Usar cotizaci√≥n internacional');
        if (forceCountry) {
          console.log('üìã Raz√≥n: Pa√≠s forzado =', forceCountry);
        } else {
          console.log('üìã Raz√≥n: CP no encontrado en base mexicana');
        }
        console.log('üìû Llamando a getShippingQuoteInternational()...');
        return await this.getShippingQuoteInternational(cartId, postalCodeTo, forceCountry);
      }

    } catch (error) {
      console.error('‚ùå ERROR EN COTIZACI√ìN H√çBRIDA:');
      console.error('   Mensaje:', error.message);
      console.error('   Stack:', error.stack);
      
      return {
        success: false,
        isHybrid: true,
        error: error.message,
        details: 'Error en funci√≥n h√≠brida de cotizaci√≥n',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Formatea las cotizaciones para el frontend
   * @param {Object} quotationsResponse - Respuesta de SkyDropX
   * @returns {Array} Cotizaciones formateadas
   */
  formatQuotationsForFrontend(quotationsResponse) {
    console.log('üîÑ Formateando cotizaciones para frontend...');
    console.log('üìã Input recibido:', JSON.stringify(quotationsResponse, null, 2));
    
    if (!quotationsResponse.success || !quotationsResponse.quotations) {
      console.log('‚ùå No hay cotizaciones exitosas para formatear');
      return [];
    }

    const quotations = quotationsResponse.quotations;
    
    // La respuesta de SkyDropX tiene rates, no data
    if (!quotations.rates || !Array.isArray(quotations.rates)) {
      console.log('‚ùå No se encontr√≥ array de rates en la respuesta');
      return [];
    }

    // Filtrar solo las cotizaciones exitosas
    const successfulRates = quotations.rates.filter(rate => rate.success === true);
    console.log(`üìä Rates exitosas encontradas: ${successfulRates.length} de ${quotations.rates.length} total`);

    if (successfulRates.length === 0) {
      console.log('‚ùå No hay rates exitosas para mostrar al frontend');
      return [];
    }

    // Formatear seg√∫n la estructura real de SkyDropX
    const formattedQuotations = successfulRates.map(rate => {
      const formatted = {
        carrier: rate.provider_display_name,
        service: rate.provider_service_name,
        price: parseFloat(rate.total),
        currency: rate.currency_code,
        estimatedDays: rate.days,
        description: `${rate.provider_display_name} - ${rate.provider_service_name}`,
        // Datos adicionales √∫tiles
        cost: rate.cost,
        zone: rate.zone,
        rateId: rate.id
      };
      
      console.log(`‚úÖ Cotizaci√≥n formateada: ${formatted.carrier} - ${formatted.service}: $${formatted.price} ${formatted.currency} (${formatted.estimatedDays} d√≠as)`);
      
      return formatted;
    });

    console.log(`üéâ ${formattedQuotations.length} cotizaciones formateadas exitosamente`);
    return formattedQuotations;
  }
}

module.exports = ShippingQuoteService;
