const DiscountCodeModel = require('../models/discountCode.model');

class DiscountCodeController {

  /**
   * Crear la tabla de c√≥digos de descuento
   */
  static async createTable(req, res) {
    try {
      await DiscountCodeModel.createTable();
      res.status(200).json({
        success: true,
        message: 'Tabla de c√≥digos de descuento creada exitosamente'
      });
    } catch (error) {
      console.error('‚ùå Error creando tabla:', error);
      res.status(500).json({
        success: false,
        message: 'Error creando tabla de c√≥digos de descuento',
        error: error.message
      });
    }
  }

  /**
   * Obtener todos los c√≥digos de descuento (Admin)
   */
  static async getAllCodes(req, res) {
    try {
      const codes = await DiscountCodeModel.getAll();
      
      res.status(200).json({
        success: true,
        message: 'C√≥digos de descuento obtenidos exitosamente',
        data: codes,
        total: codes.length
      });
    } catch (error) {
      console.error('‚ùå Error obteniendo c√≥digos:', error);
      res.status(500).json({
        success: false,
        message: 'Error obteniendo c√≥digos de descuento',
        error: error.message
      });
    }
  }

  /**
   * Obtener c√≥digos activos
   */
  static async getActiveCodes(req, res) {
    try {
      const codes = await DiscountCodeModel.getActive();
      
      res.status(200).json({
        success: true,
        message: 'C√≥digos activos obtenidos exitosamente',
        data: codes,
        total: codes.length
      });
    } catch (error) {
      console.error('‚ùå Error obteniendo c√≥digos activos:', error);
      res.status(500).json({
        success: false,
        message: 'Error obteniendo c√≥digos activos',
        error: error.message
      });
    }
  }

  /**
   * Validar c√≥digo de descuento (para checkout)
   */
  static async validateCode(req, res) {
    try {
      const { codigo } = req.params;
      const { monto = 0 } = req.body;
      
      console.log(`üéØ Validando c√≥digo: ${codigo} para monto: ${monto}`);
      
      const validation = await DiscountCodeModel.validateCode(codigo, monto);
      
      if (validation.valid) {
        res.status(200).json({
          success: true,
          message: validation.message,
          data: {
            codigo: validation.codigo,
            descuento: validation.descuento,
            valid: true
          }
        });
      } else {
        res.status(400).json({
          success: false,
          message: validation.message,
          data: {
            valid: false
          }
        });
      }
      
    } catch (error) {
      console.error('‚ùå Error validando c√≥digo:', error);
      res.status(500).json({
        success: false,
        message: 'Error validando c√≥digo de descuento',
        error: error.message
      });
    }
  }

  /**
   * Aplicar c√≥digo de descuento (incrementar uso)
   */
  static async applyCode(req, res) {
    try {
      const { codigo } = req.params;
      const { monto = 0 } = req.body;
      
      console.log(`üéØ Aplicando c√≥digo: ${codigo} para monto: ${monto}`);
      
      // Primero validar
      const validation = await DiscountCodeModel.validateCode(codigo, monto);
      
      if (!validation.valid) {
        return res.status(400).json({
          success: false,
          message: validation.message
        });
      }

      // Si es v√°lido, incrementar uso
      const updatedCode = await DiscountCodeModel.useCode(codigo);
      
      res.status(200).json({
        success: true,
        message: 'C√≥digo aplicado exitosamente',
        data: {
          codigo: updatedCode,
          descuento: validation.descuento,
          monto_final: monto - validation.descuento
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error aplicando c√≥digo:', error);
      res.status(500).json({
        success: false,
        message: 'Error aplicando c√≥digo de descuento',
        error: error.message
      });
    }
  }

  /**
   * Crear nuevo c√≥digo de descuento
   */
  static async createCode(req, res) {
    try {
      const codeData = req.body;
      
      // Validaciones b√°sicas
      if (!codeData.codigo || !codeData.tipo_descuento || !codeData.valor_descuento) {
        return res.status(400).json({
          success: false,
          message: 'C√≥digo, tipo de descuento y valor son requeridos'
        });
      }

      const newCode = await DiscountCodeModel.create(codeData);
      
      res.status(201).json({
        success: true,
        message: 'C√≥digo de descuento creado exitosamente',
        data: newCode
      });
      
    } catch (error) {
      console.error('‚ùå Error creando c√≥digo:', error);
      
      if (error.code === '23505') { // C√≥digo duplicado
        res.status(400).json({
          success: false,
          message: 'Ya existe un c√≥digo con ese nombre'
        });
      } else {
        res.status(500).json({
          success: false,
          message: 'Error creando c√≥digo de descuento',
          error: error.message
        });
      }
    }
  }

  /**
   * Actualizar c√≥digo de descuento
   */
  static async updateCode(req, res) {
    try {
      const { id } = req.params;
      const codeData = req.body;
      
      const updatedCode = await DiscountCodeModel.update(id, codeData);
      
      if (!updatedCode) {
        return res.status(404).json({
          success: false,
          message: 'C√≥digo de descuento no encontrado'
        });
      }

      res.status(200).json({
        success: true,
        message: 'C√≥digo actualizado exitosamente',
        data: updatedCode
      });
      
    } catch (error) {
      console.error('‚ùå Error actualizando c√≥digo:', error);
      res.status(500).json({
        success: false,
        message: 'Error actualizando c√≥digo',
        error: error.message
      });
    }
  }

  /**
   * Eliminar c√≥digo de descuento
   */
  static async deleteCode(req, res) {
    try {
      const { id } = req.params;
      
      const deletedCode = await DiscountCodeModel.delete(id);
      
      if (!deletedCode) {
        return res.status(404).json({
          success: false,
          message: 'C√≥digo de descuento no encontrado'
        });
      }

      res.status(200).json({
        success: true,
        message: 'C√≥digo eliminado exitosamente',
        data: deletedCode
      });
      
    } catch (error) {
      console.error('‚ùå Error eliminando c√≥digo:', error);
      res.status(500).json({
        success: false,
        message: 'Error eliminando c√≥digo',
        error: error.message
      });
    }
  }

  /**
   * Obtener c√≥digo por ID
   */
  static async getCodeById(req, res) {
    try {
      const { id } = req.params;
      
      const code = await DiscountCodeModel.getById(id);
      
      if (!code) {
        return res.status(404).json({
          success: false,
          message: 'C√≥digo de descuento no encontrado'
        });
      }

      res.status(200).json({
        success: true,
        message: 'C√≥digo obtenido exitosamente',
        data: code
      });
      
    } catch (error) {
      console.error('‚ùå Error obteniendo c√≥digo:', error);
      res.status(500).json({
        success: false,
        message: 'Error obteniendo c√≥digo',
        error: error.message
      });
    }
  }

}

module.exports = DiscountCodeController;
