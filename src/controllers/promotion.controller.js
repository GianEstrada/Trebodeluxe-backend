// controllers/promotion.controller.js - Controlador para promociones

const PromotionModel = require('../models/promotion.model');

class PromotionController {
  
  /**
   * Obtener todas las promociones activas (versi√≥n simplificada para evitar errores de BD)
   * Endpoint p√∫blico principal usado por el frontend
   */
  static async getActivePromotions(req, res) {
    try {
      console.log('üéØ Solicitando promociones activas...');
      
      // Intentar consulta completa primero
      let promotions;
      try {
        promotions = await PromotionModel.getAllActive();
        console.log(`‚úÖ Consulta completa exitosa: ${promotions.length} promociones`);
      } catch (dbError) {
        console.log('‚ö†Ô∏è Error en consulta compleja, usando fallback:', dbError.message);
        // Si falla, usar consulta simple
        promotions = await PromotionModel.getActiveSimple();
        console.log(`‚úÖ Fallback exitoso: ${promotions.length} promociones`);
      }
      
      res.status(200).json({
        success: true,
        message: 'Promociones activas obtenidas exitosamente',
        promotions: promotions || [] // Frontend espera 'promotions', no 'data'
      });
    } catch (error) {
      console.error('‚ùå Error en getActivePromotions:', error);
      
      // Retornar respuesta vac√≠a v√°lida en lugar de error
      res.status(200).json({
        success: true,
        message: 'No hay promociones activas disponibles',
        promotions: []
      });
    }
  }

  /**
   * Obtener promociones espec√≠ficas para un producto
   * Implementa sistema de prioridades y filtros por categor√≠a
   */
  static async getPromotionsForProduct(req, res) {
    try {
      const { productId } = req.params;
      const { categoria } = req.query;
      
      console.log(`üéØ Buscando promociones para producto ${productId}, categor√≠a: ${categoria}`);
      
      const promotions = await PromotionModel.getPromotionsForProduct(productId, categoria);
      
      res.status(200).json({
        success: true,
        message: 'Promociones para producto obtenidas exitosamente',
        data: promotions,
        product_id: productId,
        categoria: categoria
      });
      
    } catch (error) {
      console.error('‚ùå Error en getPromotionsForProduct:', error);
      res.status(500).json({
        success: false,
        message: 'Error obteniendo promociones del producto',
        error: error.message
      });
    }
  }

  /**
   * Debug detallado de promociones
   * Herramienta de diagn√≥stico para identificar problemas
   */
  static async debugAllPromotions(req, res) {
    try {
      console.log('üîç Iniciando debug de promociones...');
      
      const debugData = await PromotionModel.debugAllPromotions();
      
      res.status(200).json({
        success: true,
        message: 'Debug de promociones completado',
        data: debugData,
        total: debugData.length
      });
      
    } catch (error) {
      console.error('‚ùå Error en debugAllPromotions:', error);
      res.status(500).json({
        success: false,
        message: 'Error en debug de promociones',
        error: error.message
      });
    }
  }

  /**
   * Obtener todas las promociones (para admin)
   */
  static async getAllPromotions(req, res) {
    try {
      const { page = 1, limit = 10, active } = req.query;
      
      console.log(`üîç [ADMIN] Obteniendo promociones - page: ${page}, limit: ${limit}, active: ${active}`);
      
      // Usar la funci√≥n correcta seg√∫n si necesitamos todas o solo activas
      let promotions;
      if (active === 'true') {
        promotions = await PromotionModel.getAllActive();
      } else if (active === 'false') {
        // Para inactivas, necesitar√≠amos filtrar las de getAll()
        const allPromotions = await PromotionModel.getAll();
        promotions = allPromotions.filter(p => !p.activo);
      } else {
        // Sin filtro, obtener todas
        promotions = await PromotionModel.getAll();
      }
      
      // Aplicar paginaci√≥n manualmente si es necesario
      const startIndex = (parseInt(page) - 1) * parseInt(limit);
      const endIndex = startIndex + parseInt(limit);
      const paginatedPromotions = promotions.slice(startIndex, endIndex);
      
      console.log(`‚úÖ [ADMIN] ${paginatedPromotions.length} promociones obtenidas`);
      
      res.status(200).json({
        success: true,
        message: 'Todas las promociones obtenidas exitosamente',
        data: paginatedPromotions,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: promotions.length,
          pages: Math.ceil(promotions.length / parseInt(limit))
        }
      });
    } catch (error) {
      console.error('‚ùå Error en getAllPromotions:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor',
        error: error.message
      });
    }
  }

  /**
   * Crear nueva promoci√≥n
   */
  static async createPromotion(req, res) {
    try {
      const promotionData = req.body;
      const newPromotion = await PromotionModel.create(promotionData);
      
      res.status(201).json({
        success: true,
        message: 'Promoci√≥n creada exitosamente',
        data: newPromotion
      });
    } catch (error) {
      console.error('‚ùå Error creando promoci√≥n:', error);
      res.status(500).json({
        success: false,
        message: 'Error creando promoci√≥n',
        error: error.message
      });
    }
  }

  /**
   * Actualizar promoci√≥n existente
   */
  static async updatePromotion(req, res) {
    try {
      const { id } = req.params;
      const promotionData = req.body;
      
      const updatedPromotion = await PromotionModel.update(id, promotionData);
      
      res.status(200).json({
        success: true,
        message: 'Promoci√≥n actualizada exitosamente',
        data: updatedPromotion
      });
    } catch (error) {
      console.error('‚ùå Error actualizando promoci√≥n:', error);
      res.status(500).json({
        success: false,
        message: 'Error actualizando promoci√≥n',
        error: error.message
      });
    }
  }

  /**
   * Eliminar promoci√≥n
   */
  static async deletePromotion(req, res) {
    try {
      const { id } = req.params;
      const deletedPromotion = await PromotionModel.delete(id);
      
      res.status(200).json({
        success: true,
        message: 'Promoci√≥n eliminada exitosamente',
        data: deletedPromotion
      });
    } catch (error) {
      console.error('‚ùå Error eliminando promoci√≥n:', error);
      res.status(500).json({
        success: false,
        message: 'Error eliminando promoci√≥n',
        error: error.message
      });
    }
  }

  /**
   * Validar c√≥digo promocional
   */
  static async validatePromotionCode(req, res) {
    try {
      const { codigo } = req.params;
      const validation = await PromotionModel.validateCode(codigo);
      
      res.status(200).json({
        success: validation.valid,
        message: validation.message,
        data: validation.promotion || null
      });
    } catch (error) {
      console.error('‚ùå Error validando c√≥digo:', error);
      res.status(500).json({
        success: false,
        message: 'Error validando c√≥digo promocional',
        error: error.message
      });
    }
  }

  /**
   * Obtener promociones para homepage
   */
  static async getHomepagePromotions(req, res) {
    try {
      const { limit = 5 } = req.query;
      const promotions = await PromotionModel.getHomepagePromotions(parseInt(limit));
      
      res.status(200).json({
        success: true,
        message: 'Promociones del homepage obtenidas exitosamente',
        data: promotions
      });
    } catch (error) {
      console.error('‚ùå Error obteniendo promociones del homepage:', error);
      res.status(500).json({
        success: false,
        message: 'Error obteniendo promociones del homepage',
        error: error.message
      });
    }
  }

  /**
   * Obtener promociones por categor√≠a
   */
  static async getPromotionsByCategory(req, res) {
    try {
      const { categoria } = req.params;
      const promotions = await PromotionModel.getPromotionsByCategory(categoria);
      
      res.status(200).json({
        success: true,
        message: `Promociones para categor√≠a ${categoria} obtenidas exitosamente`,
        data: promotions,
        categoria: categoria
      });
    } catch (error) {
      console.error('‚ùå Error obteniendo promociones por categor√≠a:', error);
      res.status(500).json({
        success: false,
        message: 'Error obteniendo promociones por categor√≠a',
        error: error.message
      });
    }
  }

  /**
   * Obtener productos de una promoci√≥n (funcionalidad heredada)
   */
  static async getPromotionProducts(req, res) {
    try {
      const { id_promocion } = req.params;
      const { limit = 10 } = req.query;
      
      // Por ahora devolvemos respuesta vac√≠a v√°lida
      res.status(200).json({
        success: true,
        message: 'Productos de promoci√≥n obtenidos exitosamente',
        data: [],
        promocion_id: id_promocion
      });
    } catch (error) {
      console.error('‚ùå Error obteniendo productos de promoci√≥n:', error);
      res.status(500).json({
        success: false,
        message: 'Error obteniendo productos de promoci√≥n',
        error: error.message
      });
    }
  }

  /**
   * Obtener promociones aplicables (funcionalidad heredada)
   */
  static async getApplicablePromotions(req, res) {
    try {
      const { productId, categoria } = req.params;
      
      // Redirigir a la nueva funci√≥n
      const promotions = await PromotionModel.getPromotionsForProduct(productId, categoria);
      
      res.status(200).json({
        success: true,
        message: 'Promociones aplicables obtenidas exitosamente',
        data: promotions,
        product_id: productId,
        categoria: categoria
      });
    } catch (error) {
      console.error('‚ùå Error obteniendo promociones aplicables:', error);
      res.status(500).json({
        success: false,
        message: 'Error obteniendo promociones aplicables',
        error: error.message
      });
    }
  }

  /**
   * Debug espec√≠fico para admin panel - sin autenticaci√≥n
   * Para verificar exactamente qu√© estructura de datos se env√≠a al frontend
   */
  static async debugAdminResponse(req, res) {
    try {
      console.log('üîç [DEBUG ADMIN] Simulando respuesta del admin panel...');
      
      // Simular exactamente la misma l√≥gica que getAllPromotions
      const { page = 1, limit = 10, active = 'true' } = req.query;
      
      console.log(`üîç [DEBUG ADMIN] Par√°metros - page: ${page}, limit: ${limit}, active: ${active}`);
      
      // TEMPORAL: Usar getAll() para debug en lugar de getAllActive()
      let promotions;
      if (active === 'true') {
        // promotions = await PromotionModel.getAllActive();
        const allPromotions = await PromotionModel.getAll();
        promotions = allPromotions.filter(p => p.activo === true);
        console.log(`üîß [DEBUG ADMIN] Usando getAll() filtrado: ${promotions.length} activas de ${allPromotions.length} totales`);
      } else if (active === 'false') {
        // Para inactivas, necesitar√≠amos filtrar las de getAll()
        const allPromotions = await PromotionModel.getAll();
        promotions = allPromotions.filter(p => !p.activo);
      } else {
        // Sin filtro, obtener todas
        promotions = await PromotionModel.getAll();
      }
      
      // Aplicar paginaci√≥n manualmente si es necesario
      const startIndex = (parseInt(page) - 1) * parseInt(limit);
      const endIndex = startIndex + parseInt(limit);
      const paginatedPromotions = promotions.slice(startIndex, endIndex);
      
      console.log(`‚úÖ [DEBUG ADMIN] ${paginatedPromotions.length} promociones obtenidas`);
      
      // Mostrar la estructura exacta de cada promoci√≥n
      paginatedPromotions.forEach((promo, index) => {
        console.log(`üìä [DEBUG ADMIN] Promoci√≥n ${index + 1}:`);
        console.log(`  - ID: ${promo.id_promocion}`);
        console.log(`  - Nombre: ${promo.nombre}`);
        console.log(`  - Tipo: ${promo.tipo}`);
        console.log(`  - Porcentaje: ${promo.porcentaje} (tipo: ${typeof promo.porcentaje})`);
        console.log(`  - Detalles: ${JSON.stringify(promo.detalles)}`);
        console.log(`  - Activo: ${promo.activo}`);
        console.log('  ---');
      });
      
      const response = {
        success: true,
        message: 'DEBUG: Todas las promociones obtenidas exitosamente',
        data: paginatedPromotions,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: promotions.length,
          pages: Math.ceil(promotions.length / parseInt(limit))
        }
      };
      
      console.log(`üîç [DEBUG ADMIN] Estructura de respuesta:`, JSON.stringify(response, null, 2));
      
      res.status(200).json(response);
      
    } catch (error) {
      console.error('‚ùå [DEBUG ADMIN] Error:', error);
      res.status(500).json({
        success: false,
        message: 'Error en debug de admin panel',
        error: error.message
      });
    }
  }

}

module.exports = PromotionController;
